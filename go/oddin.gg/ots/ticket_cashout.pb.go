// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: ots/ticket_cashout.proto

package ots

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TicketCashoutRejectReason_Code int32

const (
	// Not a valid value. Used for blocking 0 as invalid state.
	TicketCashoutRejectReason_CODE_UNSPECIFIED TicketCashoutRejectReason_Code = 0
	// We are having internal problems.
	TicketCashoutRejectReason_CODE_INTERNAL TicketCashoutRejectReason_Code = 1
	// Ticket cashout is not valid.
	TicketCashoutRejectReason_CODE_INVALID_ARGUMENT TicketCashoutRejectReason_Code = 2
	// Ticket not found.
	TicketCashoutRejectReason_CODE_NOT_FOUND TicketCashoutRejectReason_Code = 3
	// Ticket is not in accepted state.
	TicketCashoutRejectReason_CODE_WRONG_TICKET_STAKE TicketCashoutRejectReason_Code = 4
	// Cashout amount is higher than possible payout.
	TicketCashoutRejectReason_CODE_MAX_PAYOUT_BREACHED TicketCashoutRejectReason_Code = 5
)

// Enum value maps for TicketCashoutRejectReason_Code.
var (
	TicketCashoutRejectReason_Code_name = map[int32]string{
		0: "CODE_UNSPECIFIED",
		1: "CODE_INTERNAL",
		2: "CODE_INVALID_ARGUMENT",
		3: "CODE_NOT_FOUND",
		4: "CODE_WRONG_TICKET_STAKE",
		5: "CODE_MAX_PAYOUT_BREACHED",
	}
	TicketCashoutRejectReason_Code_value = map[string]int32{
		"CODE_UNSPECIFIED":         0,
		"CODE_INTERNAL":            1,
		"CODE_INVALID_ARGUMENT":    2,
		"CODE_NOT_FOUND":           3,
		"CODE_WRONG_TICKET_STAKE":  4,
		"CODE_MAX_PAYOUT_BREACHED": 5,
	}
)

func (x TicketCashoutRejectReason_Code) Enum() *TicketCashoutRejectReason_Code {
	p := new(TicketCashoutRejectReason_Code)
	*p = x
	return p
}

func (x TicketCashoutRejectReason_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TicketCashoutRejectReason_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_ots_ticket_cashout_proto_enumTypes[0].Descriptor()
}

func (TicketCashoutRejectReason_Code) Type() protoreflect.EnumType {
	return &file_ots_ticket_cashout_proto_enumTypes[0]
}

func (x TicketCashoutRejectReason_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TicketCashoutRejectReason_Code.Descriptor instead.
func (TicketCashoutRejectReason_Code) EnumDescriptor() ([]byte, []int) {
	return file_ots_ticket_cashout_proto_rawDescGZIP(), []int{0, 0}
}

type TicketCashoutRejectReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reason code.
	Code TicketCashoutRejectReason_Code `protobuf:"varint,1,opt,name=code,proto3,enum=ots.TicketCashoutRejectReason_Code" json:"code,omitempty"`
	// Message describing a reason.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *TicketCashoutRejectReason) Reset() {
	*x = TicketCashoutRejectReason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_cashout_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketCashoutRejectReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketCashoutRejectReason) ProtoMessage() {}

func (x *TicketCashoutRejectReason) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_cashout_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketCashoutRejectReason.ProtoReflect.Descriptor instead.
func (*TicketCashoutRejectReason) Descriptor() ([]byte, []int) {
	return file_ots_ticket_cashout_proto_rawDescGZIP(), []int{0}
}

func (x *TicketCashoutRejectReason) GetCode() TicketCashoutRejectReason_Code {
	if x != nil {
		return x.Code
	}
	return TicketCashoutRejectReason_CODE_UNSPECIFIED
}

func (x *TicketCashoutRejectReason) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type TicketCashoutState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ticket id from operator’s system.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Acceptance status - REJECTED | ACCEPTED. PENDING is not used.
	TicketStatus AcceptanceStatus `protobuf:"varint,2,opt,name=ticket_status,json=ticketStatus,proto3,enum=ots.enums.AcceptanceStatus" json:"ticket_status,omitempty"`
	// Information about rejection reason.
	RejectReason *TicketCashoutRejectReason `protobuf:"bytes,3,opt,name=reject_reason,json=rejectReason,proto3" json:"reject_reason,omitempty"`
}

func (x *TicketCashoutState) Reset() {
	*x = TicketCashoutState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_cashout_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketCashoutState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketCashoutState) ProtoMessage() {}

func (x *TicketCashoutState) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_cashout_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketCashoutState.ProtoReflect.Descriptor instead.
func (*TicketCashoutState) Descriptor() ([]byte, []int) {
	return file_ots_ticket_cashout_proto_rawDescGZIP(), []int{1}
}

func (x *TicketCashoutState) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TicketCashoutState) GetTicketStatus() AcceptanceStatus {
	if x != nil {
		return x.TicketStatus
	}
	return AcceptanceStatus_ACCEPTANCE_STATUS_UNSPECIFIED
}

func (x *TicketCashoutState) GetRejectReason() *TicketCashoutRejectReason {
	if x != nil {
		return x.RejectReason
	}
	return nil
}

type BetCashout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bet id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Total cashout amount. Applicable for bet. It needs to be multiplied by 10000 (or ticket stake multiplier) and rounded to long value in local currency. All subsequent partial cashout must include previous values.
	CashoutStake uint64 `protobuf:"varint,2,opt,name=cashout_stake,json=cashoutStake,proto3" json:"cashout_stake,omitempty"`
	// Total cashout percent. Applicable bet. It needs to be multiplied by 10000 (or ticket stake multiplier) and rounded to long value in local currency. All subsequent partial cashout must include previous values.
	CashoutPercent *wrapperspb.UInt64Value `protobuf:"bytes,3,opt,name=cashout_percent,json=cashoutPercent,proto3" json:"cashout_percent,omitempty"`
}

func (x *BetCashout) Reset() {
	*x = BetCashout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_cashout_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetCashout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetCashout) ProtoMessage() {}

func (x *BetCashout) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_cashout_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetCashout.ProtoReflect.Descriptor instead.
func (*BetCashout) Descriptor() ([]byte, []int) {
	return file_ots_ticket_cashout_proto_rawDescGZIP(), []int{2}
}

func (x *BetCashout) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BetCashout) GetCashoutStake() uint64 {
	if x != nil {
		return x.CashoutStake
	}
	return 0
}

func (x *BetCashout) GetCashoutPercent() *wrapperspb.UInt64Value {
	if x != nil {
		return x.CashoutPercent
	}
	return nil
}

// TicketCashout is used as request for Ticket Cashout RPC call.
type TicketCashout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ticket id from operator’s system.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Timestamp of request creation.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Total cashout amount. Applicable for whole ticket. It needs to be multiplied by 10000 (or ticket stake multiplier) and rounded to long value in local currency. All subsequent partial cashout must include previous values.
	CashoutStake *wrapperspb.UInt64Value `protobuf:"bytes,3,opt,name=cashout_stake,json=cashoutStake,proto3" json:"cashout_stake,omitempty"`
	// Total cashout percent. Applicable for whole ticket. It needs to be multiplied by 10000 (or ticket stake multiplier) and rounded to long value in local currency. All subsequent partial cashout must include previous values.
	CashoutPercent *wrapperspb.UInt64Value `protobuf:"bytes,4,opt,name=cashout_percent,json=cashoutPercent,proto3" json:"cashout_percent,omitempty"`
	BetCashout     []*BetCashout           `protobuf:"bytes,5,rep,name=bet_cashout,json=betCashout,proto3" json:"bet_cashout,omitempty"`
	// Stake multiplier for stake - optional value to use instead of 10000
	StakeMultiplier *wrapperspb.UInt64Value `protobuf:"bytes,6,opt,name=stake_multiplier,json=stakeMultiplier,proto3" json:"stake_multiplier,omitempty"`
}

func (x *TicketCashout) Reset() {
	*x = TicketCashout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_cashout_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketCashout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketCashout) ProtoMessage() {}

func (x *TicketCashout) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_cashout_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketCashout.ProtoReflect.Descriptor instead.
func (*TicketCashout) Descriptor() ([]byte, []int) {
	return file_ots_ticket_cashout_proto_rawDescGZIP(), []int{3}
}

func (x *TicketCashout) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TicketCashout) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *TicketCashout) GetCashoutStake() *wrapperspb.UInt64Value {
	if x != nil {
		return x.CashoutStake
	}
	return nil
}

func (x *TicketCashout) GetCashoutPercent() *wrapperspb.UInt64Value {
	if x != nil {
		return x.CashoutPercent
	}
	return nil
}

func (x *TicketCashout) GetBetCashout() []*BetCashout {
	if x != nil {
		return x.BetCashout
	}
	return nil
}

func (x *TicketCashout) GetStakeMultiplier() *wrapperspb.UInt64Value {
	if x != nil {
		return x.StakeMultiplier
	}
	return nil
}

var File_ots_ticket_cashout_proto protoreflect.FileDescriptor

var file_ots_ticket_cashout_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6f, 0x74, 0x73, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x73,
	0x68, 0x6f, 0x75, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x6f, 0x74, 0x73, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x14, 0x6f, 0x74, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x02, 0x0a, 0x19, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x43, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43,
	0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x52, 0x47, 0x55, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x4b, 0x45, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x41,
	0x58, 0x5f, 0x50, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x43, 0x48, 0x45,
	0x44, 0x10, 0x05, 0x22, 0xab, 0x01, 0x0a, 0x12, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x61,
	0x73, 0x68, 0x6f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x0d, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x0d,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x43, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x22, 0x88, 0x01, 0x0a, 0x0a, 0x42, 0x65, 0x74, 0x43, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x63, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x63, 0x61,
	0x73, 0x68, 0x6f, 0x75, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0xde, 0x02, 0x0a,
	0x0d, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x41, 0x0a, 0x0d, 0x63, 0x61, 0x73, 0x68,
	0x6f, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x63,
	0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x63,
	0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0e, 0x63, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x12, 0x30, 0x0a, 0x0b, 0x62, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x6f, 0x75,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x42, 0x65,
	0x74, 0x43, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x52, 0x0a, 0x62, 0x65, 0x74, 0x43, 0x61, 0x73,
	0x68, 0x6f, 0x75, 0x74, 0x12, 0x47, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x42, 0x1d, 0x0a,
	0x0d, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x64, 0x64, 0x69, 0x6e, 0x2e, 0x6f, 0x74, 0x73, 0x5a, 0x0c,
	0x6f, 0x64, 0x64, 0x69, 0x6e, 0x2e, 0x67, 0x67, 0x2f, 0x6f, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ots_ticket_cashout_proto_rawDescOnce sync.Once
	file_ots_ticket_cashout_proto_rawDescData = file_ots_ticket_cashout_proto_rawDesc
)

func file_ots_ticket_cashout_proto_rawDescGZIP() []byte {
	file_ots_ticket_cashout_proto_rawDescOnce.Do(func() {
		file_ots_ticket_cashout_proto_rawDescData = protoimpl.X.CompressGZIP(file_ots_ticket_cashout_proto_rawDescData)
	})
	return file_ots_ticket_cashout_proto_rawDescData
}

var file_ots_ticket_cashout_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ots_ticket_cashout_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_ots_ticket_cashout_proto_goTypes = []interface{}{
	(TicketCashoutRejectReason_Code)(0), // 0: ots.TicketCashoutRejectReason.Code
	(*TicketCashoutRejectReason)(nil),   // 1: ots.TicketCashoutRejectReason
	(*TicketCashoutState)(nil),          // 2: ots.TicketCashoutState
	(*BetCashout)(nil),                  // 3: ots.BetCashout
	(*TicketCashout)(nil),               // 4: ots.TicketCashout
	(AcceptanceStatus)(0),               // 5: ots.enums.AcceptanceStatus
	(*wrapperspb.UInt64Value)(nil),      // 6: google.protobuf.UInt64Value
	(*timestamppb.Timestamp)(nil),       // 7: google.protobuf.Timestamp
}
var file_ots_ticket_cashout_proto_depIdxs = []int32{
	0, // 0: ots.TicketCashoutRejectReason.code:type_name -> ots.TicketCashoutRejectReason.Code
	5, // 1: ots.TicketCashoutState.ticket_status:type_name -> ots.enums.AcceptanceStatus
	1, // 2: ots.TicketCashoutState.reject_reason:type_name -> ots.TicketCashoutRejectReason
	6, // 3: ots.BetCashout.cashout_percent:type_name -> google.protobuf.UInt64Value
	7, // 4: ots.TicketCashout.timestamp:type_name -> google.protobuf.Timestamp
	6, // 5: ots.TicketCashout.cashout_stake:type_name -> google.protobuf.UInt64Value
	6, // 6: ots.TicketCashout.cashout_percent:type_name -> google.protobuf.UInt64Value
	3, // 7: ots.TicketCashout.bet_cashout:type_name -> ots.BetCashout
	6, // 8: ots.TicketCashout.stake_multiplier:type_name -> google.protobuf.UInt64Value
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_ots_ticket_cashout_proto_init() }
func file_ots_ticket_cashout_proto_init() {
	if File_ots_ticket_cashout_proto != nil {
		return
	}
	file_ots_enum_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ots_ticket_cashout_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketCashoutRejectReason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_cashout_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketCashoutState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_cashout_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetCashout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_cashout_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketCashout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ots_ticket_cashout_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ots_ticket_cashout_proto_goTypes,
		DependencyIndexes: file_ots_ticket_cashout_proto_depIdxs,
		EnumInfos:         file_ots_ticket_cashout_proto_enumTypes,
		MessageInfos:      file_ots_ticket_cashout_proto_msgTypes,
	}.Build()
	File_ots_ticket_cashout_proto = out.File
	file_ots_ticket_cashout_proto_rawDesc = nil
	file_ots_ticket_cashout_proto_goTypes = nil
	file_ots_ticket_cashout_proto_depIdxs = nil
}
