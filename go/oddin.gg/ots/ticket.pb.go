// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.5
// source: ots/ticket.proto

package ots

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TicketRejectReason_Code int32

const (
	// Not a valid value. Used for blocking 0 as invalid state.
	TicketRejectReason_CODE_UNSPECIFIED TicketRejectReason_Code = 0
	// We are having internal problems.
	TicketRejectReason_CODE_INTERNAL TicketRejectReason_Code = 1
	// Ticket is not valid.
	TicketRejectReason_CODE_INVALID_ARGUMENT TicketRejectReason_Code = 2
	// Ticket already exists in our system.
	TicketRejectReason_CODE_ALREADY_EXISTS TicketRejectReason_Code = 3
	// Bet stake is lower then minimum stake.
	TicketRejectReason_CODE_STAKE_TOO_LOW TicketRejectReason_Code = 4
	// Bet stake is high then maximal stake.
	TicketRejectReason_CODE_STAKE_TOO_HIGH TicketRejectReason_Code = 5
	// Max payout breached.
	TicketRejectReason_CODE_MAX_PAYOUT_BREACHED TicketRejectReason_Code = 6
	// Ticket bets are not acceptable, check bet_info field for details.
	TicketRejectReason_CODE_BETS_NOT_ACCEPTABLE TicketRejectReason_Code = 7
	// Ticket selections are not acceptable, check selection_info field for details.
	TicketRejectReason_CODE_SELECTIONS_NOT_ACCEPTABLE TicketRejectReason_Code = 8
	// Ticket not found in our system.
	TicketRejectReason_CODE_NOT_FOUND TicketRejectReason_Code = 9
)

// Enum value maps for TicketRejectReason_Code.
var (
	TicketRejectReason_Code_name = map[int32]string{
		0: "CODE_UNSPECIFIED",
		1: "CODE_INTERNAL",
		2: "CODE_INVALID_ARGUMENT",
		3: "CODE_ALREADY_EXISTS",
		4: "CODE_STAKE_TOO_LOW",
		5: "CODE_STAKE_TOO_HIGH",
		6: "CODE_MAX_PAYOUT_BREACHED",
		7: "CODE_BETS_NOT_ACCEPTABLE",
		8: "CODE_SELECTIONS_NOT_ACCEPTABLE",
		9: "CODE_NOT_FOUND",
	}
	TicketRejectReason_Code_value = map[string]int32{
		"CODE_UNSPECIFIED":               0,
		"CODE_INTERNAL":                  1,
		"CODE_INVALID_ARGUMENT":          2,
		"CODE_ALREADY_EXISTS":            3,
		"CODE_STAKE_TOO_LOW":             4,
		"CODE_STAKE_TOO_HIGH":            5,
		"CODE_MAX_PAYOUT_BREACHED":       6,
		"CODE_BETS_NOT_ACCEPTABLE":       7,
		"CODE_SELECTIONS_NOT_ACCEPTABLE": 8,
		"CODE_NOT_FOUND":                 9,
	}
)

func (x TicketRejectReason_Code) Enum() *TicketRejectReason_Code {
	p := new(TicketRejectReason_Code)
	*p = x
	return p
}

func (x TicketRejectReason_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TicketRejectReason_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_ots_ticket_proto_enumTypes[0].Descriptor()
}

func (TicketRejectReason_Code) Type() protoreflect.EnumType {
	return &file_ots_ticket_proto_enumTypes[0]
}

func (x TicketRejectReason_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TicketRejectReason_Code.Descriptor instead.
func (TicketRejectReason_Code) EnumDescriptor() ([]byte, []int) {
	return file_ots_ticket_proto_rawDescGZIP(), []int{14, 0}
}

type TicketBetRejectReason_Code int32

const (
	// Not a valid value. Used for blocking 0 as invalid state.
	TicketBetRejectReason_CODE_UNSPECIFIED TicketBetRejectReason_Code = 0
	// At least one odds in bet is different from current odds.
	TicketBetRejectReason_CODE_ODDS_CHANGED TicketBetRejectReason_Code = 1
	// At least one selection in bet is not active.
	TicketBetRejectReason_CODE_SELECTION_NOT_ACTIVE TicketBetRejectReason_Code = 2
	// Bet stake is lower then minimum stake.
	TicketBetRejectReason_CODE_STAKE_TOO_LOW TicketBetRejectReason_Code = 3
	// Bet stake is high then maximal stake.
	TicketBetRejectReason_CODE_STAKE_TOO_HIGH TicketBetRejectReason_Code = 4
	// Max payout breached.
	TicketBetRejectReason_CODE_MAX_PAYOUT_BREACHED TicketBetRejectReason_Code = 5
	// Market liability breached.
	TicketBetRejectReason_CODE_MARKET_LIABILITY_BREACHED TicketBetRejectReason_Code = 6
	// Bettor liability breached.
	TicketBetRejectReason_CODE_BETTOR_LIABILITY_BREACHED TicketBetRejectReason_Code = 7
	// Event liability breached.
	TicketBetRejectReason_CODE_EVENT_LIABILITY_BREACHED TicketBetRejectReason_Code = 8
)

// Enum value maps for TicketBetRejectReason_Code.
var (
	TicketBetRejectReason_Code_name = map[int32]string{
		0: "CODE_UNSPECIFIED",
		1: "CODE_ODDS_CHANGED",
		2: "CODE_SELECTION_NOT_ACTIVE",
		3: "CODE_STAKE_TOO_LOW",
		4: "CODE_STAKE_TOO_HIGH",
		5: "CODE_MAX_PAYOUT_BREACHED",
		6: "CODE_MARKET_LIABILITY_BREACHED",
		7: "CODE_BETTOR_LIABILITY_BREACHED",
		8: "CODE_EVENT_LIABILITY_BREACHED",
	}
	TicketBetRejectReason_Code_value = map[string]int32{
		"CODE_UNSPECIFIED":               0,
		"CODE_ODDS_CHANGED":              1,
		"CODE_SELECTION_NOT_ACTIVE":      2,
		"CODE_STAKE_TOO_LOW":             3,
		"CODE_STAKE_TOO_HIGH":            4,
		"CODE_MAX_PAYOUT_BREACHED":       5,
		"CODE_MARKET_LIABILITY_BREACHED": 6,
		"CODE_BETTOR_LIABILITY_BREACHED": 7,
		"CODE_EVENT_LIABILITY_BREACHED":  8,
	}
)

func (x TicketBetRejectReason_Code) Enum() *TicketBetRejectReason_Code {
	p := new(TicketBetRejectReason_Code)
	*p = x
	return p
}

func (x TicketBetRejectReason_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TicketBetRejectReason_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_ots_ticket_proto_enumTypes[1].Descriptor()
}

func (TicketBetRejectReason_Code) Type() protoreflect.EnumType {
	return &file_ots_ticket_proto_enumTypes[1]
}

func (x TicketBetRejectReason_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TicketBetRejectReason_Code.Descriptor instead.
func (TicketBetRejectReason_Code) EnumDescriptor() ([]byte, []int) {
	return file_ots_ticket_proto_rawDescGZIP(), []int{15, 0}
}

type TicketSelectionRejectReason_Code int32

const (
	// Not a valid value. Used for blocking 0 as invalid state.
	TicketSelectionRejectReason_CODE_UNSPECIFIED TicketSelectionRejectReason_Code = 0
	// Selection Odds is different from current odds.
	TicketSelectionRejectReason_CODE_ODDS_CHANGED TicketSelectionRejectReason_Code = 1
	// Selection is not active.
	TicketSelectionRejectReason_CODE_NOT_ACTIVE TicketSelectionRejectReason_Code = 2
	// Selection is not independent.
	TicketSelectionRejectReason_CODE_NOT_INDEPENDENT TicketSelectionRejectReason_Code = 3
)

// Enum value maps for TicketSelectionRejectReason_Code.
var (
	TicketSelectionRejectReason_Code_name = map[int32]string{
		0: "CODE_UNSPECIFIED",
		1: "CODE_ODDS_CHANGED",
		2: "CODE_NOT_ACTIVE",
		3: "CODE_NOT_INDEPENDENT",
	}
	TicketSelectionRejectReason_Code_value = map[string]int32{
		"CODE_UNSPECIFIED":     0,
		"CODE_ODDS_CHANGED":    1,
		"CODE_NOT_ACTIVE":      2,
		"CODE_NOT_INDEPENDENT": 3,
	}
)

func (x TicketSelectionRejectReason_Code) Enum() *TicketSelectionRejectReason_Code {
	p := new(TicketSelectionRejectReason_Code)
	*p = x
	return p
}

func (x TicketSelectionRejectReason_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TicketSelectionRejectReason_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_ots_ticket_proto_enumTypes[2].Descriptor()
}

func (TicketSelectionRejectReason_Code) Type() protoreflect.EnumType {
	return &file_ots_ticket_proto_enumTypes[2]
}

func (x TicketSelectionRejectReason_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TicketSelectionRejectReason_Code.Descriptor instead.
func (TicketSelectionRejectReason_Code) EnumDescriptor() ([]byte, []int) {
	return file_ots_ticket_proto_rawDescGZIP(), []int{17, 0}
}

type TicketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*TicketRequest_Ticket
	//	*TicketRequest_Keepalive
	Data isTicketRequest_Data `protobuf_oneof:"data"`
}

func (x *TicketRequest) Reset() {
	*x = TicketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketRequest) ProtoMessage() {}

func (x *TicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketRequest.ProtoReflect.Descriptor instead.
func (*TicketRequest) Descriptor() ([]byte, []int) {
	return file_ots_ticket_proto_rawDescGZIP(), []int{0}
}

func (m *TicketRequest) GetData() isTicketRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *TicketRequest) GetTicket() *Ticket {
	if x, ok := x.GetData().(*TicketRequest_Ticket); ok {
		return x.Ticket
	}
	return nil
}

func (x *TicketRequest) GetKeepalive() *StreamKeepalive {
	if x, ok := x.GetData().(*TicketRequest_Keepalive); ok {
		return x.Keepalive
	}
	return nil
}

type isTicketRequest_Data interface {
	isTicketRequest_Data()
}

type TicketRequest_Ticket struct {
	Ticket *Ticket `protobuf:"bytes,1,opt,name=ticket,proto3,oneof"`
}

type TicketRequest_Keepalive struct {
	Keepalive *StreamKeepalive `protobuf:"bytes,2,opt,name=keepalive,proto3,oneof"`
}

func (*TicketRequest_Ticket) isTicketRequest_Data() {}

func (*TicketRequest_Keepalive) isTicketRequest_Data() {}

type TicketResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*TicketResultRequest_Ticket
	//	*TicketResultRequest_Keepalive
	//	*TicketResultRequest_After
	Data isTicketResultRequest_Data `protobuf_oneof:"data"`
}

func (x *TicketResultRequest) Reset() {
	*x = TicketResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketResultRequest) ProtoMessage() {}

func (x *TicketResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketResultRequest.ProtoReflect.Descriptor instead.
func (*TicketResultRequest) Descriptor() ([]byte, []int) {
	return file_ots_ticket_proto_rawDescGZIP(), []int{1}
}

func (m *TicketResultRequest) GetData() isTicketResultRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *TicketResultRequest) GetTicket() *TicketResult {
	if x, ok := x.GetData().(*TicketResultRequest_Ticket); ok {
		return x.Ticket
	}
	return nil
}

func (x *TicketResultRequest) GetKeepalive() *StreamKeepalive {
	if x, ok := x.GetData().(*TicketResultRequest_Keepalive); ok {
		return x.Keepalive
	}
	return nil
}

func (x *TicketResultRequest) GetAfter() *TicketsAfter {
	if x, ok := x.GetData().(*TicketResultRequest_After); ok {
		return x.After
	}
	return nil
}

type isTicketResultRequest_Data interface {
	isTicketResultRequest_Data()
}

type TicketResultRequest_Ticket struct {
	Ticket *TicketResult `protobuf:"bytes,1,opt,name=ticket,proto3,oneof"`
}

type TicketResultRequest_Keepalive struct {
	Keepalive *StreamKeepalive `protobuf:"bytes,2,opt,name=keepalive,proto3,oneof"`
}

type TicketResultRequest_After struct {
	After *TicketsAfter `protobuf:"bytes,3,opt,name=after,proto3,oneof"`
}

func (*TicketResultRequest_Ticket) isTicketResultRequest_Data() {}

func (*TicketResultRequest_Keepalive) isTicketResultRequest_Data() {}

func (*TicketResultRequest_After) isTicketResultRequest_Data() {}

type TicketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*TicketResponse_State
	//	*TicketResponse_Keepalive
	Data isTicketResponse_Data `protobuf_oneof:"data"`
}

func (x *TicketResponse) Reset() {
	*x = TicketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketResponse) ProtoMessage() {}

func (x *TicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketResponse.ProtoReflect.Descriptor instead.
func (*TicketResponse) Descriptor() ([]byte, []int) {
	return file_ots_ticket_proto_rawDescGZIP(), []int{2}
}

func (m *TicketResponse) GetData() isTicketResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *TicketResponse) GetState() *TicketState {
	if x, ok := x.GetData().(*TicketResponse_State); ok {
		return x.State
	}
	return nil
}

func (x *TicketResponse) GetKeepalive() *StreamKeepalive {
	if x, ok := x.GetData().(*TicketResponse_Keepalive); ok {
		return x.Keepalive
	}
	return nil
}

type isTicketResponse_Data interface {
	isTicketResponse_Data()
}

type TicketResponse_State struct {
	State *TicketState `protobuf:"bytes,1,opt,name=state,proto3,oneof"`
}

type TicketResponse_Keepalive struct {
	Keepalive *StreamKeepalive `protobuf:"bytes,2,opt,name=keepalive,proto3,oneof"`
}

func (*TicketResponse_State) isTicketResponse_Data() {}

func (*TicketResponse_Keepalive) isTicketResponse_Data() {}

type TicketResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*TicketResultResponse_State
	//	*TicketResultResponse_Keepalive
	//	*TicketResultResponse_After
	Data isTicketResultResponse_Data `protobuf_oneof:"data"`
}

func (x *TicketResultResponse) Reset() {
	*x = TicketResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketResultResponse) ProtoMessage() {}

func (x *TicketResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketResultResponse.ProtoReflect.Descriptor instead.
func (*TicketResultResponse) Descriptor() ([]byte, []int) {
	return file_ots_ticket_proto_rawDescGZIP(), []int{3}
}

func (m *TicketResultResponse) GetData() isTicketResultResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *TicketResultResponse) GetState() *TicketResultState {
	if x, ok := x.GetData().(*TicketResultResponse_State); ok {
		return x.State
	}
	return nil
}

func (x *TicketResultResponse) GetKeepalive() *StreamKeepalive {
	if x, ok := x.GetData().(*TicketResultResponse_Keepalive); ok {
		return x.Keepalive
	}
	return nil
}

func (x *TicketResultResponse) GetAfter() *TicketsAfterState {
	if x, ok := x.GetData().(*TicketResultResponse_After); ok {
		return x.After
	}
	return nil
}

type isTicketResultResponse_Data interface {
	isTicketResultResponse_Data()
}

type TicketResultResponse_State struct {
	State *TicketResultState `protobuf:"bytes,1,opt,name=state,proto3,oneof"`
}

type TicketResultResponse_Keepalive struct {
	Keepalive *StreamKeepalive `protobuf:"bytes,2,opt,name=keepalive,proto3,oneof"`
}

type TicketResultResponse_After struct {
	After *TicketsAfterState `protobuf:"bytes,3,opt,name=after,proto3,oneof"`
}

func (*TicketResultResponse_State) isTicketResultResponse_Data() {}

func (*TicketResultResponse_Keepalive) isTicketResultResponse_Data() {}

func (*TicketResultResponse_After) isTicketResultResponse_Data() {}

// TicketRequest is used as request for Ticket RPC call.
type Ticket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ticket id from operator’s system.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Timestamp of request creation.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// List of ticket bets.
	Bets []*Bet `protobuf:"bytes,3,rep,name=bets,proto3" json:"bets,omitempty"`
	// Alternative odds used to accept bet.
	AcceptOddsChange AcceptOddsChange `protobuf:"varint,4,opt,name=accept_odds_change,json=acceptOddsChange,proto3,enum=ots.enums.AcceptOddsChange" json:"accept_odds_change,omitempty"`
	// Total number of combinations to validate against generated combinations.
	TotalCombinations uint64 `protobuf:"varint,5,opt,name=total_combinations,json=totalCombinations,proto3" json:"total_combinations,omitempty"`
	// Customer information.
	Customer *TicketCustomer `protobuf:"bytes,6,opt,name=customer,proto3" json:"customer,omitempty"`
	// Reoffer ticket id.
	ReofferId *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=reoffer_id,json=reofferId,proto3" json:"reoffer_id,omitempty"`
	// Array of selections which form this bet, if omitted all selections are used.
	Selections map[string]*TicketSelection `protobuf:"bytes,9,rep,name=selections,proto3" json:"selections,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Id of terminal or shop, where bet is received.
	LocationId *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	// Currency of bets stakes. Must be the same for the whole ticket.
	Currency string `protobuf:"bytes,11,opt,name=currency,proto3" json:"currency,omitempty"`
	// Channel from which ticket was placed (internet, terminal, etc..).
	Channel                   TicketChannel          `protobuf:"varint,12,opt,name=channel,proto3,enum=ots.enums.TicketChannel" json:"channel,omitempty"`
	LastForeignEventStartTime *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=lastForeignEventStartTime,proto3" json:"lastForeignEventStartTime,omitempty"`
	LastForeignEventEndTime   *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=lastForeignEventEndTime,proto3" json:"lastForeignEventEndTime,omitempty"`
	// Stake multiplier for stake - optional value to use instead of 10000
	StakeMultiplier *wrapperspb.UInt64Value `protobuf:"bytes,15,opt,name=stake_multiplier,json=stakeMultiplier,proto3" json:"stake_multiplier,omitempty"`
}

func (x *Ticket) Reset() {
	*x = Ticket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ticket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ticket) ProtoMessage() {}

func (x *Ticket) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ticket.ProtoReflect.Descriptor instead.
func (*Ticket) Descriptor() ([]byte, []int) {
	return file_ots_ticket_proto_rawDescGZIP(), []int{4}
}

func (x *Ticket) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Ticket) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Ticket) GetBets() []*Bet {
	if x != nil {
		return x.Bets
	}
	return nil
}

func (x *Ticket) GetAcceptOddsChange() AcceptOddsChange {
	if x != nil {
		return x.AcceptOddsChange
	}
	return AcceptOddsChange_ACCEPT_ODDS_CHANGE_UNSPECIFIED
}

func (x *Ticket) GetTotalCombinations() uint64 {
	if x != nil {
		return x.TotalCombinations
	}
	return 0
}

func (x *Ticket) GetCustomer() *TicketCustomer {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *Ticket) GetReofferId() *wrapperspb.StringValue {
	if x != nil {
		return x.ReofferId
	}
	return nil
}

func (x *Ticket) GetSelections() map[string]*TicketSelection {
	if x != nil {
		return x.Selections
	}
	return nil
}

func (x *Ticket) GetLocationId() *wrapperspb.StringValue {
	if x != nil {
		return x.LocationId
	}
	return nil
}

func (x *Ticket) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Ticket) GetChannel() TicketChannel {
	if x != nil {
		return x.Channel
	}
	return TicketChannel_TICKET_CHANNEL_UNSPECIFIED
}

func (x *Ticket) GetLastForeignEventStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastForeignEventStartTime
	}
	return nil
}

func (x *Ticket) GetLastForeignEventEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastForeignEventEndTime
	}
	return nil
}

func (x *Ticket) GetStakeMultiplier() *wrapperspb.UInt64Value {
	if x != nil {
		return x.StakeMultiplier
	}
	return nil
}

type TicketSelection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Selection ID mush have specific format:
	// "od:<product_id>/<event_id>/<market_id>/<outcome_id>?<specifier1>=<value1>[&<specifierN=valueN>]*"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Odds multiplied by 10000 and rounded to uint value.
	Odds uint64 `protobuf:"varint,3,opt,name=odds,proto3" json:"odds,omitempty"`
	// Information about selection origin
	Foreign *wrapperspb.BoolValue `protobuf:"bytes,4,opt,name=foreign,proto3" json:"foreign,omitempty"`
}

func (x *TicketSelection) Reset() {
	*x = TicketSelection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketSelection) ProtoMessage() {}

func (x *TicketSelection) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketSelection.ProtoReflect.Descriptor instead.
func (*TicketSelection) Descriptor() ([]byte, []int) {
	return file_ots_ticket_proto_rawDescGZIP(), []int{5}
}

func (x *TicketSelection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TicketSelection) GetOdds() uint64 {
	if x != nil {
		return x.Odds
	}
	return 0
}

func (x *TicketSelection) GetForeign() *wrapperspb.BoolValue {
	if x != nil {
		return x.Foreign
	}
	return nil
}

type TicketCustomer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bookmaker unique user ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Bettor IP address.
	Ip *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	// Bettor unique device id from which ticket was placed.
	DeviceId *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// Supported language ISO-639-1 code.
	Language string `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Optional bettor nickname
	Nickname *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=nickname,proto3" json:"nickname,omitempty"`
}

func (x *TicketCustomer) Reset() {
	*x = TicketCustomer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketCustomer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketCustomer) ProtoMessage() {}

func (x *TicketCustomer) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketCustomer.ProtoReflect.Descriptor instead.
func (*TicketCustomer) Descriptor() ([]byte, []int) {
	return file_ots_ticket_proto_rawDescGZIP(), []int{6}
}

func (x *TicketCustomer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TicketCustomer) GetIp() *wrapperspb.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *TicketCustomer) GetDeviceId() *wrapperspb.StringValue {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

func (x *TicketCustomer) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *TicketCustomer) GetNickname() *wrapperspb.StringValue {
	if x != nil {
		return x.Nickname
	}
	return nil
}

type Bet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bet id for multi-bets ticket.
	Id *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Bonus part of the bet.
	Bonus *BetBonus `protobuf:"bytes,2,opt,name=bonus,proto3" json:"bonus,omitempty"`
	// Stake of the bet.
	Stake *BetStake `protobuf:"bytes,3,opt,name=stake,proto3" json:"stake,omitempty"`
	// Reoffer bet id.
	//
	// Deprecated: Do not use.
	ReofferId *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=reoffer_id,json=reofferId,proto3" json:"reoffer_id,omitempty"`
	// Total wins for all generated combinations for the bet. We use this for validation purposes.
	TotalWins *wrapperspb.UInt64Value `protobuf:"bytes,5,opt,name=total_wins,json=totalWins,proto3" json:"total_wins,omitempty"`
	// Array of all the systems in the bet ([0] is not allowed, use [fold] instead).
	Systems []uint32 `protobuf:"varint,6,rep,packed,name=systems,proto3" json:"systems,omitempty"`
	//  Array of selections which form this bet, if omitted all selections are used.
	Selections []*BetSelection `protobuf:"bytes,7,rep,name=selections,proto3" json:"selections,omitempty"`
}

func (x *Bet) Reset() {
	*x = Bet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bet) ProtoMessage() {}

func (x *Bet) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bet.ProtoReflect.Descriptor instead.
func (*Bet) Descriptor() ([]byte, []int) {
	return file_ots_ticket_proto_rawDescGZIP(), []int{7}
}

func (x *Bet) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Bet) GetBonus() *BetBonus {
	if x != nil {
		return x.Bonus
	}
	return nil
}

func (x *Bet) GetStake() *BetStake {
	if x != nil {
		return x.Stake
	}
	return nil
}

// Deprecated: Do not use.
func (x *Bet) GetReofferId() *wrapperspb.StringValue {
	if x != nil {
		return x.ReofferId
	}
	return nil
}

func (x *Bet) GetTotalWins() *wrapperspb.UInt64Value {
	if x != nil {
		return x.TotalWins
	}
	return nil
}

func (x *Bet) GetSystems() []uint32 {
	if x != nil {
		return x.Systems
	}
	return nil
}

func (x *Bet) GetSelections() []*BetSelection {
	if x != nil {
		return x.Selections
	}
	return nil
}

type BetSelection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Selection ID is a link on TicketSelection.ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *BetSelection) Reset() {
	*x = BetSelection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetSelection) ProtoMessage() {}

func (x *BetSelection) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetSelection.ProtoReflect.Descriptor instead.
func (*BetSelection) Descriptor() ([]byte, []int) {
	return file_ots_ticket_proto_rawDescGZIP(), []int{8}
}

func (x *BetSelection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type BetStake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Stake amount. It needs to be multiplied by 10000 (or ticket stake multiplier) and rounded to long value in local currency.
	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	// Stake type - SUM or UNIT.
	Type BetStakeType `protobuf:"varint,2,opt,name=type,proto3,enum=ots.enums.BetStakeType" json:"type,omitempty"`
}

func (x *BetStake) Reset() {
	*x = BetStake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetStake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetStake) ProtoMessage() {}

func (x *BetStake) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetStake.ProtoReflect.Descriptor instead.
func (*BetStake) Descriptor() ([]byte, []int) {
	return file_ots_ticket_proto_rawDescGZIP(), []int{9}
}

func (x *BetStake) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *BetStake) GetType() BetStakeType {
	if x != nil {
		return x.Type
	}
	return BetStakeType_BET_STAKE_TYPE_UNSPECIFIED
}

type BetBonus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bonus amount to add to the win. It needs to be multiplied by 10000 and rounded to long value in local currency.
	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	// Bonus type - only supported TOTAL for now.
	Type BetBonusType `protobuf:"varint,2,opt,name=type,proto3,enum=ots.enums.BetBonusType" json:"type,omitempty"`
	// Bonus payout mode. Typically used for system bets - only supported ALL for now (means all bets has to be winning).
	Mode BetBonusMode `protobuf:"varint,3,opt,name=mode,proto3,enum=ots.enums.BetBonusMode" json:"mode,omitempty"`
}

func (x *BetBonus) Reset() {
	*x = BetBonus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetBonus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetBonus) ProtoMessage() {}

func (x *BetBonus) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetBonus.ProtoReflect.Descriptor instead.
func (*BetBonus) Descriptor() ([]byte, []int) {
	return file_ots_ticket_proto_rawDescGZIP(), []int{10}
}

func (x *BetBonus) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *BetBonus) GetType() BetBonusType {
	if x != nil {
		return x.Type
	}
	return BetBonusType_BET_BONUS_TYPE_UNSPECIFIED
}

func (x *BetBonus) GetMode() BetBonusMode {
	if x != nil {
		return x.Mode
	}
	return BetBonusMode_BET_BONUS_MODE_UNSPECIFIED
}

type TicketsAfterState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique request id from TicketsAfter request
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Request tickets after this date
	After *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=after,proto3" json:"after,omitempty"`
	// Tickets resulted after timestamp
	Tickets []*TicketResultState `protobuf:"bytes,3,rep,name=tickets,proto3" json:"tickets,omitempty"`
	// Information about possible error during processing
	Error *TicketResultError `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	// Information about batching - batch size is fixed to 100 tickets
	BatchInfo *TicketsAfterState_BatchInfo `protobuf:"bytes,5,opt,name=batch_info,json=batchInfo,proto3" json:"batch_info,omitempty"`
}

func (x *TicketsAfterState) Reset() {
	*x = TicketsAfterState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketsAfterState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketsAfterState) ProtoMessage() {}

func (x *TicketsAfterState) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketsAfterState.ProtoReflect.Descriptor instead.
func (*TicketsAfterState) Descriptor() ([]byte, []int) {
	return file_ots_ticket_proto_rawDescGZIP(), []int{11}
}

func (x *TicketsAfterState) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *TicketsAfterState) GetAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.After
	}
	return nil
}

func (x *TicketsAfterState) GetTickets() []*TicketResultState {
	if x != nil {
		return x.Tickets
	}
	return nil
}

func (x *TicketsAfterState) GetError() *TicketResultError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TicketsAfterState) GetBatchInfo() *TicketsAfterState_BatchInfo {
	if x != nil {
		return x.BatchInfo
	}
	return nil
}

type TicketState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ticket id from operator’s system.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Acceptance status - PENDING | REJECTED | ACCEPTED.
	TicketStatus AcceptanceStatus `protobuf:"varint,2,opt,name=ticket_status,json=ticketStatus,proto3,enum=ots.enums.AcceptanceStatus" json:"ticket_status,omitempty"`
	// Information about rejection reason.
	RejectReason *TicketRejectReason `protobuf:"bytes,3,opt,name=reject_reason,json=rejectReason,proto3" json:"reject_reason,omitempty"`
	// Rejection details of bets.
	BetInfo map[string]*TicketResponseBetInfo `protobuf:"bytes,4,rep,name=bet_info,json=betInfo,proto3" json:"bet_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Rejection details of selections.
	SelectionInfo map[string]*TicketSelectionRejectReason `protobuf:"bytes,7,rep,name=selection_info,json=selectionInfo,proto3" json:"selection_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Exchange rate used to convert currency to EUR multiplied by 10 000 and rounded to long value.
	ExchangeRate *wrapperspb.UInt64Value `protobuf:"bytes,5,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"`
	// Alternative odds used to accept bet.
	AutoAcceptedOdds map[string]*AutoAcceptedOdds `protobuf:"bytes,6,rep,name=auto_accepted_odds,json=autoAcceptedOdds,proto3" json:"auto_accepted_odds,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Information about the reoffer stake.
	Reoffer *ResponseReoffer `protobuf:"bytes,8,opt,name=reoffer,proto3" json:"reoffer,omitempty"`
	// Total odds for whole ticket
	TotalOdds uint64 `protobuf:"varint,9,opt,name=total_odds,json=totalOdds,proto3" json:"total_odds,omitempty"`
	// Possible ticket pending delay
	PendingDelay *wrapperspb.UInt32Value `protobuf:"bytes,10,opt,name=pending_delay,json=pendingDelay,proto3" json:"pending_delay,omitempty"`
}

func (x *TicketState) Reset() {
	*x = TicketState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketState) ProtoMessage() {}

func (x *TicketState) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketState.ProtoReflect.Descriptor instead.
func (*TicketState) Descriptor() ([]byte, []int) {
	return file_ots_ticket_proto_rawDescGZIP(), []int{12}
}

func (x *TicketState) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TicketState) GetTicketStatus() AcceptanceStatus {
	if x != nil {
		return x.TicketStatus
	}
	return AcceptanceStatus_ACCEPTANCE_STATUS_UNSPECIFIED
}

func (x *TicketState) GetRejectReason() *TicketRejectReason {
	if x != nil {
		return x.RejectReason
	}
	return nil
}

func (x *TicketState) GetBetInfo() map[string]*TicketResponseBetInfo {
	if x != nil {
		return x.BetInfo
	}
	return nil
}

func (x *TicketState) GetSelectionInfo() map[string]*TicketSelectionRejectReason {
	if x != nil {
		return x.SelectionInfo
	}
	return nil
}

func (x *TicketState) GetExchangeRate() *wrapperspb.UInt64Value {
	if x != nil {
		return x.ExchangeRate
	}
	return nil
}

func (x *TicketState) GetAutoAcceptedOdds() map[string]*AutoAcceptedOdds {
	if x != nil {
		return x.AutoAcceptedOdds
	}
	return nil
}

func (x *TicketState) GetReoffer() *ResponseReoffer {
	if x != nil {
		return x.Reoffer
	}
	return nil
}

func (x *TicketState) GetTotalOdds() uint64 {
	if x != nil {
		return x.TotalOdds
	}
	return 0
}

func (x *TicketState) GetPendingDelay() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PendingDelay
	}
	return nil
}

type AutoAcceptedOdds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Selection id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Odds which were ticked placed multiplied by 10 000 and rounded to long value.
	RequestedOdds uint64 `protobuf:"varint,2,opt,name=requested_odds,json=requestedOdds,proto3" json:"requested_odds,omitempty"`
	// Odds which were ticked accepted multiplied by 10 000 and rounded to long value.
	UsedOdds uint64 `protobuf:"varint,3,opt,name=used_odds,json=usedOdds,proto3" json:"used_odds,omitempty"`
}

func (x *AutoAcceptedOdds) Reset() {
	*x = AutoAcceptedOdds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoAcceptedOdds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoAcceptedOdds) ProtoMessage() {}

func (x *AutoAcceptedOdds) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoAcceptedOdds.ProtoReflect.Descriptor instead.
func (*AutoAcceptedOdds) Descriptor() ([]byte, []int) {
	return file_ots_ticket_proto_rawDescGZIP(), []int{13}
}

func (x *AutoAcceptedOdds) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AutoAcceptedOdds) GetRequestedOdds() uint64 {
	if x != nil {
		return x.RequestedOdds
	}
	return 0
}

func (x *AutoAcceptedOdds) GetUsedOdds() uint64 {
	if x != nil {
		return x.UsedOdds
	}
	return 0
}

type TicketRejectReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reason code.
	Code TicketRejectReason_Code `protobuf:"varint,1,opt,name=code,proto3,enum=ots.TicketRejectReason_Code" json:"code,omitempty"`
	// Message describing a reason.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *TicketRejectReason) Reset() {
	*x = TicketRejectReason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketRejectReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketRejectReason) ProtoMessage() {}

func (x *TicketRejectReason) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketRejectReason.ProtoReflect.Descriptor instead.
func (*TicketRejectReason) Descriptor() ([]byte, []int) {
	return file_ots_ticket_proto_rawDescGZIP(), []int{14}
}

func (x *TicketRejectReason) GetCode() TicketRejectReason_Code {
	if x != nil {
		return x.Code
	}
	return TicketRejectReason_CODE_UNSPECIFIED
}

func (x *TicketRejectReason) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type TicketBetRejectReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reason code.
	Code TicketBetRejectReason_Code `protobuf:"varint,1,opt,name=code,proto3,enum=ots.TicketBetRejectReason_Code" json:"code,omitempty"`
	// Message describing a reason.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *TicketBetRejectReason) Reset() {
	*x = TicketBetRejectReason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketBetRejectReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketBetRejectReason) ProtoMessage() {}

func (x *TicketBetRejectReason) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketBetRejectReason.ProtoReflect.Descriptor instead.
func (*TicketBetRejectReason) Descriptor() ([]byte, []int) {
	return file_ots_ticket_proto_rawDescGZIP(), []int{15}
}

func (x *TicketBetRejectReason) GetCode() TicketBetRejectReason_Code {
	if x != nil {
		return x.Code
	}
	return TicketBetRejectReason_CODE_UNSPECIFIED
}

func (x *TicketBetRejectReason) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type TicketResponseBetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique bet id from operator’s system.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Information about rejection reason.
	RejectReason *TicketBetRejectReason `protobuf:"bytes,2,opt,name=reject_reason,json=rejectReason,proto3" json:"reject_reason,omitempty"`
	// Information about the reoffer stake.
	Reoffer *ResponseReoffer `protobuf:"bytes,3,opt,name=reoffer,proto3" json:"reoffer,omitempty"`
	// Total odds for whole bet
	TotalOdds uint64 `protobuf:"varint,4,opt,name=total_odds,json=totalOdds,proto3" json:"total_odds,omitempty"`
}

func (x *TicketResponseBetInfo) Reset() {
	*x = TicketResponseBetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketResponseBetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketResponseBetInfo) ProtoMessage() {}

func (x *TicketResponseBetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketResponseBetInfo.ProtoReflect.Descriptor instead.
func (*TicketResponseBetInfo) Descriptor() ([]byte, []int) {
	return file_ots_ticket_proto_rawDescGZIP(), []int{16}
}

func (x *TicketResponseBetInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TicketResponseBetInfo) GetRejectReason() *TicketBetRejectReason {
	if x != nil {
		return x.RejectReason
	}
	return nil
}

func (x *TicketResponseBetInfo) GetReoffer() *ResponseReoffer {
	if x != nil {
		return x.Reoffer
	}
	return nil
}

func (x *TicketResponseBetInfo) GetTotalOdds() uint64 {
	if x != nil {
		return x.TotalOdds
	}
	return 0
}

type TicketSelectionRejectReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reason code.
	Code TicketSelectionRejectReason_Code `protobuf:"varint,1,opt,name=code,proto3,enum=ots.TicketSelectionRejectReason_Code" json:"code,omitempty"`
	// Message describing a reason.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *TicketSelectionRejectReason) Reset() {
	*x = TicketSelectionRejectReason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketSelectionRejectReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketSelectionRejectReason) ProtoMessage() {}

func (x *TicketSelectionRejectReason) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketSelectionRejectReason.ProtoReflect.Descriptor instead.
func (*TicketSelectionRejectReason) Descriptor() ([]byte, []int) {
	return file_ots_ticket_proto_rawDescGZIP(), []int{17}
}

func (x *TicketSelectionRejectReason) GetCode() TicketSelectionRejectReason_Code {
	if x != nil {
		return x.Code
	}
	return TicketSelectionRejectReason_CODE_UNSPECIFIED
}

func (x *TicketSelectionRejectReason) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ResponseReoffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stake uint64 `protobuf:"varint,1,opt,name=stake,proto3" json:"stake,omitempty"`
}

func (x *ResponseReoffer) Reset() {
	*x = ResponseReoffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseReoffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseReoffer) ProtoMessage() {}

func (x *ResponseReoffer) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseReoffer.ProtoReflect.Descriptor instead.
func (*ResponseReoffer) Descriptor() ([]byte, []int) {
	return file_ots_ticket_proto_rawDescGZIP(), []int{18}
}

func (x *ResponseReoffer) GetStake() uint64 {
	if x != nil {
		return x.Stake
	}
	return 0
}

type TicketsAfter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique request id
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Request tickets after this date
	After *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=after,proto3" json:"after,omitempty"`
}

func (x *TicketsAfter) Reset() {
	*x = TicketsAfter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketsAfter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketsAfter) ProtoMessage() {}

func (x *TicketsAfter) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketsAfter.ProtoReflect.Descriptor instead.
func (*TicketsAfter) Descriptor() ([]byte, []int) {
	return file_ots_ticket_proto_rawDescGZIP(), []int{19}
}

func (x *TicketsAfter) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *TicketsAfter) GetAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.After
	}
	return nil
}

type TicketResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ticket id from operator’s system.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TicketResult) Reset() {
	*x = TicketResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketResult) ProtoMessage() {}

func (x *TicketResult) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketResult.ProtoReflect.Descriptor instead.
func (*TicketResult) Descriptor() ([]byte, []int) {
	return file_ots_ticket_proto_rawDescGZIP(), []int{20}
}

func (x *TicketResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type TicketResultStateBetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique bet id from operator’s system.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Information about rejection reason - WON | VOIDED | LOST | PENDING_LOST | NOT_RESULTED | REJECTED.
	BetStatus ResultingStatus `protobuf:"varint,2,opt,name=bet_status,json=betStatus,proto3,enum=ots.enums.ResultingStatus" json:"bet_status,omitempty"`
	// Won amount on bet converted by ticket exchange_rate and multiplied by 10000 and rounded to uint value.
	WonAmount *wrapperspb.UInt64Value `protobuf:"bytes,3,opt,name=won_amount,json=wonAmount,proto3" json:"won_amount,omitempty"`
}

func (x *TicketResultStateBetInfo) Reset() {
	*x = TicketResultStateBetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketResultStateBetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketResultStateBetInfo) ProtoMessage() {}

func (x *TicketResultStateBetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketResultStateBetInfo.ProtoReflect.Descriptor instead.
func (*TicketResultStateBetInfo) Descriptor() ([]byte, []int) {
	return file_ots_ticket_proto_rawDescGZIP(), []int{21}
}

func (x *TicketResultStateBetInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TicketResultStateBetInfo) GetBetStatus() ResultingStatus {
	if x != nil {
		return x.BetStatus
	}
	return ResultingStatus_RESULTING_STATUS_UNSPECIFIED
}

func (x *TicketResultStateBetInfo) GetWonAmount() *wrapperspb.UInt64Value {
	if x != nil {
		return x.WonAmount
	}
	return nil
}

type TicketResultStateSelectionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Information about selection status - WON | VOIDED | LOST | PENDING_LOST | NOT_RESULTED | REJECTED.
	SelectionStatus ResultingStatus `protobuf:"varint,1,opt,name=selection_status,json=selectionStatus,proto3,enum=ots.enums.ResultingStatus" json:"selection_status,omitempty"`
}

func (x *TicketResultStateSelectionInfo) Reset() {
	*x = TicketResultStateSelectionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketResultStateSelectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketResultStateSelectionInfo) ProtoMessage() {}

func (x *TicketResultStateSelectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketResultStateSelectionInfo.ProtoReflect.Descriptor instead.
func (*TicketResultStateSelectionInfo) Descriptor() ([]byte, []int) {
	return file_ots_ticket_proto_rawDescGZIP(), []int{22}
}

func (x *TicketResultStateSelectionInfo) GetSelectionStatus() ResultingStatus {
	if x != nil {
		return x.SelectionStatus
	}
	return ResultingStatus_RESULTING_STATUS_UNSPECIFIED
}

type TicketResultError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    ReasonCode              `protobuf:"varint,1,opt,name=code,proto3,enum=ots.enums.ReasonCode" json:"code,omitempty"`
	Message *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *TicketResultError) Reset() {
	*x = TicketResultError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketResultError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketResultError) ProtoMessage() {}

func (x *TicketResultError) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketResultError.ProtoReflect.Descriptor instead.
func (*TicketResultError) Descriptor() ([]byte, []int) {
	return file_ots_ticket_proto_rawDescGZIP(), []int{23}
}

func (x *TicketResultError) GetCode() ReasonCode {
	if x != nil {
		return x.Code
	}
	return ReasonCode_REASON_CODE_UNSPECIFIED
}

func (x *TicketResultError) GetMessage() *wrapperspb.StringValue {
	if x != nil {
		return x.Message
	}
	return nil
}

type TicketResultState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ticket id from operator’s system.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Resulting status - WON | VOIDED | LOST | PENDING_LOST | NOT_RESULTED | REJECTED.
	TicketStatus ResultingStatus `protobuf:"varint,2,opt,name=ticket_status,json=ticketStatus,proto3,enum=ots.enums.ResultingStatus" json:"ticket_status,omitempty"`
	// Won amount of ticket converted by exchange_rate and multiplied by 10000 and rounded to uint value.
	WonAmount *wrapperspb.UInt64Value `protobuf:"bytes,3,opt,name=won_amount,json=wonAmount,proto3" json:"won_amount,omitempty"`
	// Rejection details of bets.
	BetInfo map[string]*TicketResultStateBetInfo `protobuf:"bytes,4,rep,name=bet_info,json=betInfo,proto3" json:"bet_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Rejection details of selections.
	SelectionInfo map[string]*TicketResultStateSelectionInfo `protobuf:"bytes,5,rep,name=selection_info,json=selectionInfo,proto3" json:"selection_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Exchange rate used to convert currency to EUR multiplied by 10 000 and rounded to long value.
	ExchangeRate uint64 `protobuf:"varint,6,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"`
	// Ticket result timestamp.
	ResultedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=resulted_at,json=resultedAt,proto3" json:"resulted_at,omitempty"`
	// Information about possible error during processing
	Error *TicketResultError `protobuf:"bytes,8,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TicketResultState) Reset() {
	*x = TicketResultState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketResultState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketResultState) ProtoMessage() {}

func (x *TicketResultState) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketResultState.ProtoReflect.Descriptor instead.
func (*TicketResultState) Descriptor() ([]byte, []int) {
	return file_ots_ticket_proto_rawDescGZIP(), []int{24}
}

func (x *TicketResultState) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TicketResultState) GetTicketStatus() ResultingStatus {
	if x != nil {
		return x.TicketStatus
	}
	return ResultingStatus_RESULTING_STATUS_UNSPECIFIED
}

func (x *TicketResultState) GetWonAmount() *wrapperspb.UInt64Value {
	if x != nil {
		return x.WonAmount
	}
	return nil
}

func (x *TicketResultState) GetBetInfo() map[string]*TicketResultStateBetInfo {
	if x != nil {
		return x.BetInfo
	}
	return nil
}

func (x *TicketResultState) GetSelectionInfo() map[string]*TicketResultStateSelectionInfo {
	if x != nil {
		return x.SelectionInfo
	}
	return nil
}

func (x *TicketResultState) GetExchangeRate() uint64 {
	if x != nil {
		return x.ExchangeRate
	}
	return 0
}

func (x *TicketResultState) GetResultedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ResultedAt
	}
	return nil
}

func (x *TicketResultState) GetError() *TicketResultError {
	if x != nil {
		return x.Error
	}
	return nil
}

type TicketsAfterState_BatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actual uint32 `protobuf:"varint,1,opt,name=actual,proto3" json:"actual,omitempty"`
	Total  uint32 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *TicketsAfterState_BatchInfo) Reset() {
	*x = TicketsAfterState_BatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketsAfterState_BatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketsAfterState_BatchInfo) ProtoMessage() {}

func (x *TicketsAfterState_BatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketsAfterState_BatchInfo.ProtoReflect.Descriptor instead.
func (*TicketsAfterState_BatchInfo) Descriptor() ([]byte, []int) {
	return file_ots_ticket_proto_rawDescGZIP(), []int{11, 0}
}

func (x *TicketsAfterState_BatchInfo) GetActual() uint32 {
	if x != nil {
		return x.Actual
	}
	return 0
}

func (x *TicketsAfterState_BatchInfo) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_ots_ticket_proto protoreflect.FileDescriptor

var file_ots_ticket_proto_rawDesc = []byte{
	0x0a, 0x10, 0x6f, 0x74, 0x73, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x03, 0x6f, 0x74, 0x73, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x6f, 0x74, 0x73, 0x2f, 0x65, 0x6e,
	0x75, 0x6d, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11,
	0x6f, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x74, 0x0a, 0x0d, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x25, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x48,
	0x00, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x6b, 0x65, 0x65,
	0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f,
	0x74, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69,
	0x76, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x42,
	0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xab, 0x01, 0x0a, 0x13, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2b, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x48, 0x00, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x34, 0x0a, 0x09,
	0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4b, 0x65, 0x65, 0x70,
	0x61, 0x6c, 0x69, 0x76, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69,
	0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x42, 0x06, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x78, 0x0a, 0x0e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x34, 0x0a, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x4b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6b, 0x65,
	0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xb4, 0x01, 0x0a, 0x14, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x6b, 0x65, 0x65, 0x70,
	0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x74,
	0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76,
	0x65, 0x48, 0x00, 0x52, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x2e,
	0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6f, 0x74, 0x73, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x42, 0x06,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf2, 0x06, 0x0a, 0x06, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x04, 0x62,
	0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x6f, 0x74, 0x73, 0x2e,
	0x42, 0x65, 0x74, 0x52, 0x04, 0x62, 0x65, 0x74, 0x73, 0x12, 0x49, 0x0a, 0x12, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x5f, 0x6f, 0x64, 0x64, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4f, 0x64, 0x64, 0x73, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x10, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4f, 0x64, 0x64, 0x73, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0a, 0x72, 0x65, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x72, 0x65, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d,
	0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6f, 0x74, 0x73,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x58, 0x0a,
	0x19, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x19, 0x6c, 0x61,
	0x73, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x46,
	0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x47, 0x0a,
	0x10, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x1a, 0x53, 0x0a, 0x0f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x74, 0x73,
	0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6b, 0x0a, 0x0f, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x6f, 0x64,
	0x64, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x07, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x22, 0xdf, 0x01, 0x0a, 0x0e, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x70, 0x12, 0x39, 0x0a, 0x09, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x38, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc8, 0x02, 0x0a, 0x03, 0x42,
	0x65, 0x74, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x23, 0x0a, 0x05, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x42, 0x65, 0x74, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x05,
	0x62, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x42, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x72, 0x65,
	0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x09, 0x72, 0x65, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x57, 0x69, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x31, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x42, 0x65, 0x74,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x1e, 0x0a, 0x0c, 0x42, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4d, 0x0a, 0x08, 0x42, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x42, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x7a, 0x0a, 0x08, 0x42, 0x65, 0x74, 0x42, 0x6f, 0x6e, 0x75, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x42, 0x65, 0x74, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x42, 0x65,
	0x74, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x22, 0xc0, 0x02, 0x0a, 0x11, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x07, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x07, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x74,
	0x73, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x39, 0x0a, 0x09, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x22, 0xe6, 0x06, 0x0a, 0x0b, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x0d, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6f, 0x74, 0x73,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x0d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f,
	0x74, 0x73, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x08, 0x62, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x62, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4a, 0x0a,
	0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x0d, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x54, 0x0a, 0x12,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x64,
	0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x4f, 0x64, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x4f, 0x64,
	0x64, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x72, 0x65, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x65, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x07, 0x72, 0x65, 0x6f, 0x66, 0x66,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x64, 0x64, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x64, 0x64,
	0x73, 0x12, 0x41, 0x0a, 0x0d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x6c, 0x61, 0x79, 0x1a, 0x56, 0x0a, 0x0c, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x62, 0x0a, 0x12,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x5a, 0x0a, 0x15, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64,
	0x4f, 0x64, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x74, 0x73,
	0x2e, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x4f, 0x64, 0x64,
	0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x66, 0x0a, 0x10,
	0x41, 0x75, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x4f, 0x64, 0x64, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x64,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x4f, 0x64, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x64, 0x5f,
	0x6f, 0x64, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x75, 0x73, 0x65, 0x64,
	0x4f, 0x64, 0x64, 0x73, 0x22, 0xeb, 0x02, 0x0a, 0x12, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6f, 0x74, 0x73, 0x2e,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x88, 0x02, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x52, 0x47, 0x55, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x4c, 0x52,
	0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x03, 0x12, 0x16, 0x0a,
	0x12, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4b, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f,
	0x4c, 0x4f, 0x57, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x4b, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x05, 0x12, 0x1c,
	0x0a, 0x18, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x50, 0x41, 0x59, 0x4f, 0x55,
	0x54, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x43, 0x48, 0x45, 0x44, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x45, 0x54, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x43,
	0x43, 0x45, 0x50, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x07, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x08, 0x12, 0x12,
	0x0a, 0x0e, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x09, 0x22, 0xf5, 0x02, 0x0a, 0x15, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x65, 0x74,
	0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6f, 0x74, 0x73,
	0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x65, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8c, 0x02, 0x0a, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x4f, 0x44, 0x44, 0x53, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02,
	0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4b, 0x45, 0x5f, 0x54,
	0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x4b, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10,
	0x04, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x50, 0x41,
	0x59, 0x4f, 0x55, 0x54, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x43, 0x48, 0x45, 0x44, 0x10, 0x05, 0x12,
	0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x4c,
	0x49, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x43, 0x48, 0x45,
	0x44, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x45, 0x54, 0x54,
	0x4f, 0x52, 0x5f, 0x4c, 0x49, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x42, 0x52, 0x45,
	0x41, 0x43, 0x48, 0x45, 0x44, 0x10, 0x07, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x49, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x42, 0x52, 0x45, 0x41, 0x43, 0x48, 0x45, 0x44, 0x10, 0x08, 0x22, 0xb7, 0x01, 0x0a, 0x15, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x74,
	0x73, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x65, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x07, 0x72, 0x65, 0x6f, 0x66, 0x66, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x07, 0x72, 0x65,
	0x6f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f,
	0x64, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x4f, 0x64, 0x64, 0x73, 0x22, 0xd6, 0x01, 0x0a, 0x1b, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x62, 0x0a, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x4f, 0x44, 0x44, 0x53, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x49, 0x4e, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x22, 0x27, 0x0a,
	0x0f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x6f, 0x66, 0x66, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x22, 0x5f, 0x0a, 0x0c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x22, 0x1e, 0x0a, 0x0c, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa2, 0x01, 0x0a, 0x18, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x62, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x3b, 0x0a, 0x0a, 0x77, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x09, 0x77, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x67, 0x0a, 0x1e,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45,
	0x0a, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x76, 0x0a, 0x11, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x85, 0x05,
	0x0a, 0x11, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6f, 0x74, 0x73,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x77, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x77, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3e, 0x0a, 0x08, 0x62, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x42, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x62, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x50, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x74, 0x73, 0x2e,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x1a, 0x59, 0x0a, 0x0c, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x65,
	0x0a, 0x12, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x1d, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x64, 0x64,
	0x69, 0x6e, 0x2e, 0x6f, 0x74, 0x73, 0x5a, 0x0c, 0x6f, 0x64, 0x64, 0x69, 0x6e, 0x2e, 0x67, 0x67,
	0x2f, 0x6f, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ots_ticket_proto_rawDescOnce sync.Once
	file_ots_ticket_proto_rawDescData = file_ots_ticket_proto_rawDesc
)

func file_ots_ticket_proto_rawDescGZIP() []byte {
	file_ots_ticket_proto_rawDescOnce.Do(func() {
		file_ots_ticket_proto_rawDescData = protoimpl.X.CompressGZIP(file_ots_ticket_proto_rawDescData)
	})
	return file_ots_ticket_proto_rawDescData
}

var file_ots_ticket_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_ots_ticket_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_ots_ticket_proto_goTypes = []interface{}{
	(TicketRejectReason_Code)(0),           // 0: ots.TicketRejectReason.Code
	(TicketBetRejectReason_Code)(0),        // 1: ots.TicketBetRejectReason.Code
	(TicketSelectionRejectReason_Code)(0),  // 2: ots.TicketSelectionRejectReason.Code
	(*TicketRequest)(nil),                  // 3: ots.TicketRequest
	(*TicketResultRequest)(nil),            // 4: ots.TicketResultRequest
	(*TicketResponse)(nil),                 // 5: ots.TicketResponse
	(*TicketResultResponse)(nil),           // 6: ots.TicketResultResponse
	(*Ticket)(nil),                         // 7: ots.Ticket
	(*TicketSelection)(nil),                // 8: ots.TicketSelection
	(*TicketCustomer)(nil),                 // 9: ots.TicketCustomer
	(*Bet)(nil),                            // 10: ots.Bet
	(*BetSelection)(nil),                   // 11: ots.BetSelection
	(*BetStake)(nil),                       // 12: ots.BetStake
	(*BetBonus)(nil),                       // 13: ots.BetBonus
	(*TicketsAfterState)(nil),              // 14: ots.TicketsAfterState
	(*TicketState)(nil),                    // 15: ots.TicketState
	(*AutoAcceptedOdds)(nil),               // 16: ots.AutoAcceptedOdds
	(*TicketRejectReason)(nil),             // 17: ots.TicketRejectReason
	(*TicketBetRejectReason)(nil),          // 18: ots.TicketBetRejectReason
	(*TicketResponseBetInfo)(nil),          // 19: ots.TicketResponseBetInfo
	(*TicketSelectionRejectReason)(nil),    // 20: ots.TicketSelectionRejectReason
	(*ResponseReoffer)(nil),                // 21: ots.ResponseReoffer
	(*TicketsAfter)(nil),                   // 22: ots.TicketsAfter
	(*TicketResult)(nil),                   // 23: ots.TicketResult
	(*TicketResultStateBetInfo)(nil),       // 24: ots.TicketResultStateBetInfo
	(*TicketResultStateSelectionInfo)(nil), // 25: ots.TicketResultStateSelectionInfo
	(*TicketResultError)(nil),              // 26: ots.TicketResultError
	(*TicketResultState)(nil),              // 27: ots.TicketResultState
	nil,                                    // 28: ots.Ticket.SelectionsEntry
	(*TicketsAfterState_BatchInfo)(nil),    // 29: ots.TicketsAfterState.BatchInfo
	nil,                                    // 30: ots.TicketState.BetInfoEntry
	nil,                                    // 31: ots.TicketState.SelectionInfoEntry
	nil,                                    // 32: ots.TicketState.AutoAcceptedOddsEntry
	nil,                                    // 33: ots.TicketResultState.BetInfoEntry
	nil,                                    // 34: ots.TicketResultState.SelectionInfoEntry
	(*StreamKeepalive)(nil),                // 35: ots.StreamKeepalive
	(*timestamppb.Timestamp)(nil),          // 36: google.protobuf.Timestamp
	(AcceptOddsChange)(0),                  // 37: ots.enums.AcceptOddsChange
	(*wrapperspb.StringValue)(nil),         // 38: google.protobuf.StringValue
	(TicketChannel)(0),                     // 39: ots.enums.TicketChannel
	(*wrapperspb.UInt64Value)(nil),         // 40: google.protobuf.UInt64Value
	(*wrapperspb.BoolValue)(nil),           // 41: google.protobuf.BoolValue
	(BetStakeType)(0),                      // 42: ots.enums.BetStakeType
	(BetBonusType)(0),                      // 43: ots.enums.BetBonusType
	(BetBonusMode)(0),                      // 44: ots.enums.BetBonusMode
	(AcceptanceStatus)(0),                  // 45: ots.enums.AcceptanceStatus
	(*wrapperspb.UInt32Value)(nil),         // 46: google.protobuf.UInt32Value
	(ResultingStatus)(0),                   // 47: ots.enums.ResultingStatus
	(ReasonCode)(0),                        // 48: ots.enums.ReasonCode
}
var file_ots_ticket_proto_depIdxs = []int32{
	7,  // 0: ots.TicketRequest.ticket:type_name -> ots.Ticket
	35, // 1: ots.TicketRequest.keepalive:type_name -> ots.StreamKeepalive
	23, // 2: ots.TicketResultRequest.ticket:type_name -> ots.TicketResult
	35, // 3: ots.TicketResultRequest.keepalive:type_name -> ots.StreamKeepalive
	22, // 4: ots.TicketResultRequest.after:type_name -> ots.TicketsAfter
	15, // 5: ots.TicketResponse.state:type_name -> ots.TicketState
	35, // 6: ots.TicketResponse.keepalive:type_name -> ots.StreamKeepalive
	27, // 7: ots.TicketResultResponse.state:type_name -> ots.TicketResultState
	35, // 8: ots.TicketResultResponse.keepalive:type_name -> ots.StreamKeepalive
	14, // 9: ots.TicketResultResponse.after:type_name -> ots.TicketsAfterState
	36, // 10: ots.Ticket.timestamp:type_name -> google.protobuf.Timestamp
	10, // 11: ots.Ticket.bets:type_name -> ots.Bet
	37, // 12: ots.Ticket.accept_odds_change:type_name -> ots.enums.AcceptOddsChange
	9,  // 13: ots.Ticket.customer:type_name -> ots.TicketCustomer
	38, // 14: ots.Ticket.reoffer_id:type_name -> google.protobuf.StringValue
	28, // 15: ots.Ticket.selections:type_name -> ots.Ticket.SelectionsEntry
	38, // 16: ots.Ticket.location_id:type_name -> google.protobuf.StringValue
	39, // 17: ots.Ticket.channel:type_name -> ots.enums.TicketChannel
	36, // 18: ots.Ticket.lastForeignEventStartTime:type_name -> google.protobuf.Timestamp
	36, // 19: ots.Ticket.lastForeignEventEndTime:type_name -> google.protobuf.Timestamp
	40, // 20: ots.Ticket.stake_multiplier:type_name -> google.protobuf.UInt64Value
	41, // 21: ots.TicketSelection.foreign:type_name -> google.protobuf.BoolValue
	38, // 22: ots.TicketCustomer.ip:type_name -> google.protobuf.StringValue
	38, // 23: ots.TicketCustomer.device_id:type_name -> google.protobuf.StringValue
	38, // 24: ots.TicketCustomer.nickname:type_name -> google.protobuf.StringValue
	38, // 25: ots.Bet.id:type_name -> google.protobuf.StringValue
	13, // 26: ots.Bet.bonus:type_name -> ots.BetBonus
	12, // 27: ots.Bet.stake:type_name -> ots.BetStake
	38, // 28: ots.Bet.reoffer_id:type_name -> google.protobuf.StringValue
	40, // 29: ots.Bet.total_wins:type_name -> google.protobuf.UInt64Value
	11, // 30: ots.Bet.selections:type_name -> ots.BetSelection
	42, // 31: ots.BetStake.type:type_name -> ots.enums.BetStakeType
	43, // 32: ots.BetBonus.type:type_name -> ots.enums.BetBonusType
	44, // 33: ots.BetBonus.mode:type_name -> ots.enums.BetBonusMode
	36, // 34: ots.TicketsAfterState.after:type_name -> google.protobuf.Timestamp
	27, // 35: ots.TicketsAfterState.tickets:type_name -> ots.TicketResultState
	26, // 36: ots.TicketsAfterState.error:type_name -> ots.TicketResultError
	29, // 37: ots.TicketsAfterState.batch_info:type_name -> ots.TicketsAfterState.BatchInfo
	45, // 38: ots.TicketState.ticket_status:type_name -> ots.enums.AcceptanceStatus
	17, // 39: ots.TicketState.reject_reason:type_name -> ots.TicketRejectReason
	30, // 40: ots.TicketState.bet_info:type_name -> ots.TicketState.BetInfoEntry
	31, // 41: ots.TicketState.selection_info:type_name -> ots.TicketState.SelectionInfoEntry
	40, // 42: ots.TicketState.exchange_rate:type_name -> google.protobuf.UInt64Value
	32, // 43: ots.TicketState.auto_accepted_odds:type_name -> ots.TicketState.AutoAcceptedOddsEntry
	21, // 44: ots.TicketState.reoffer:type_name -> ots.ResponseReoffer
	46, // 45: ots.TicketState.pending_delay:type_name -> google.protobuf.UInt32Value
	0,  // 46: ots.TicketRejectReason.code:type_name -> ots.TicketRejectReason.Code
	1,  // 47: ots.TicketBetRejectReason.code:type_name -> ots.TicketBetRejectReason.Code
	18, // 48: ots.TicketResponseBetInfo.reject_reason:type_name -> ots.TicketBetRejectReason
	21, // 49: ots.TicketResponseBetInfo.reoffer:type_name -> ots.ResponseReoffer
	2,  // 50: ots.TicketSelectionRejectReason.code:type_name -> ots.TicketSelectionRejectReason.Code
	36, // 51: ots.TicketsAfter.after:type_name -> google.protobuf.Timestamp
	47, // 52: ots.TicketResultStateBetInfo.bet_status:type_name -> ots.enums.ResultingStatus
	40, // 53: ots.TicketResultStateBetInfo.won_amount:type_name -> google.protobuf.UInt64Value
	47, // 54: ots.TicketResultStateSelectionInfo.selection_status:type_name -> ots.enums.ResultingStatus
	48, // 55: ots.TicketResultError.code:type_name -> ots.enums.ReasonCode
	38, // 56: ots.TicketResultError.message:type_name -> google.protobuf.StringValue
	47, // 57: ots.TicketResultState.ticket_status:type_name -> ots.enums.ResultingStatus
	40, // 58: ots.TicketResultState.won_amount:type_name -> google.protobuf.UInt64Value
	33, // 59: ots.TicketResultState.bet_info:type_name -> ots.TicketResultState.BetInfoEntry
	34, // 60: ots.TicketResultState.selection_info:type_name -> ots.TicketResultState.SelectionInfoEntry
	36, // 61: ots.TicketResultState.resulted_at:type_name -> google.protobuf.Timestamp
	26, // 62: ots.TicketResultState.error:type_name -> ots.TicketResultError
	8,  // 63: ots.Ticket.SelectionsEntry.value:type_name -> ots.TicketSelection
	19, // 64: ots.TicketState.BetInfoEntry.value:type_name -> ots.TicketResponseBetInfo
	20, // 65: ots.TicketState.SelectionInfoEntry.value:type_name -> ots.TicketSelectionRejectReason
	16, // 66: ots.TicketState.AutoAcceptedOddsEntry.value:type_name -> ots.AutoAcceptedOdds
	24, // 67: ots.TicketResultState.BetInfoEntry.value:type_name -> ots.TicketResultStateBetInfo
	25, // 68: ots.TicketResultState.SelectionInfoEntry.value:type_name -> ots.TicketResultStateSelectionInfo
	69, // [69:69] is the sub-list for method output_type
	69, // [69:69] is the sub-list for method input_type
	69, // [69:69] is the sub-list for extension type_name
	69, // [69:69] is the sub-list for extension extendee
	0,  // [0:69] is the sub-list for field type_name
}

func init() { file_ots_ticket_proto_init() }
func file_ots_ticket_proto_init() {
	if File_ots_ticket_proto != nil {
		return
	}
	file_ots_enum_enums_proto_init()
	file_ots_commons_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ots_ticket_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ticket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketSelection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketCustomer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetSelection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetStake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetBonus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketsAfterState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoAcceptedOdds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketRejectReason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketBetRejectReason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketResponseBetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketSelectionRejectReason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseReoffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketsAfter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketResultStateBetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketResultStateSelectionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketResultError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketResultState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketsAfterState_BatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ots_ticket_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*TicketRequest_Ticket)(nil),
		(*TicketRequest_Keepalive)(nil),
	}
	file_ots_ticket_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*TicketResultRequest_Ticket)(nil),
		(*TicketResultRequest_Keepalive)(nil),
		(*TicketResultRequest_After)(nil),
	}
	file_ots_ticket_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*TicketResponse_State)(nil),
		(*TicketResponse_Keepalive)(nil),
	}
	file_ots_ticket_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*TicketResultResponse_State)(nil),
		(*TicketResultResponse_Keepalive)(nil),
		(*TicketResultResponse_After)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ots_ticket_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ots_ticket_proto_goTypes,
		DependencyIndexes: file_ots_ticket_proto_depIdxs,
		EnumInfos:         file_ots_ticket_proto_enumTypes,
		MessageInfos:      file_ots_ticket_proto_msgTypes,
	}.Build()
	File_ots_ticket_proto = out.File
	file_ots_ticket_proto_rawDesc = nil
	file_ots_ticket_proto_goTypes = nil
	file_ots_ticket_proto_depIdxs = nil
}
