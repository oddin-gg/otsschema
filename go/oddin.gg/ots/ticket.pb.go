// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: ots/ticket.proto

package ots

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// TicketRequest is used as request for Ticket RPC call.
type TicketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ticket id from operatorâ€™s system.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Timestamp of request creation.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// List of ticket bets.
	Bets []*Bet `protobuf:"bytes,3,rep,name=bets,proto3" json:"bets,omitempty"`
	// Alternative odds used to accept bet.
	AcceptOddsChange AcceptOddsChange `protobuf:"varint,4,opt,name=accept_odds_change,json=acceptOddsChange,proto3,enum=ots.enums.AcceptOddsChange" json:"accept_odds_change,omitempty"`
	// Total number of combinations to validate against generated combinations.
	TotalCombinations uint64 `protobuf:"varint,5,opt,name=total_combinations,json=totalCombinations,proto3" json:"total_combinations,omitempty"`
	// Customer information.
	Customer *TicketCustomer `protobuf:"bytes,6,opt,name=customer,proto3" json:"customer,omitempty"`
	// Reoffer ticket id.
	ReofferId *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=reoffer_id,json=reofferId,proto3" json:"reoffer_id,omitempty"`
	// Array of selections which form this bet, if omitted all selections are used.
	Selections map[string]*TicketSelection `protobuf:"bytes,9,rep,name=selections,proto3" json:"selections,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Id of terminal or shop, where bet is received.
	LocationId *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	// Currency of bets stakes. Must be the same for the whole ticket.
	Currency string `protobuf:"bytes,11,opt,name=currency,proto3" json:"currency,omitempty"`
	// Channel from which ticket was placed (internet, terminal, etc..).
	Channel TicketChannel `protobuf:"varint,12,opt,name=channel,proto3,enum=ots.enums.TicketChannel" json:"channel,omitempty"`
}

func (x *TicketRequest) Reset() {
	*x = TicketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketRequest) ProtoMessage() {}

func (x *TicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketRequest.ProtoReflect.Descriptor instead.
func (*TicketRequest) Descriptor() ([]byte, []int) {
	return file_ots_ticket_proto_rawDescGZIP(), []int{0}
}

func (x *TicketRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TicketRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *TicketRequest) GetBets() []*Bet {
	if x != nil {
		return x.Bets
	}
	return nil
}

func (x *TicketRequest) GetAcceptOddsChange() AcceptOddsChange {
	if x != nil {
		return x.AcceptOddsChange
	}
	return AcceptOddsChange_ACCEPT_ODDS_CHANGE_UNSPECIFIED
}

func (x *TicketRequest) GetTotalCombinations() uint64 {
	if x != nil {
		return x.TotalCombinations
	}
	return 0
}

func (x *TicketRequest) GetCustomer() *TicketCustomer {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *TicketRequest) GetReofferId() *wrapperspb.StringValue {
	if x != nil {
		return x.ReofferId
	}
	return nil
}

func (x *TicketRequest) GetSelections() map[string]*TicketSelection {
	if x != nil {
		return x.Selections
	}
	return nil
}

func (x *TicketRequest) GetLocationId() *wrapperspb.StringValue {
	if x != nil {
		return x.LocationId
	}
	return nil
}

func (x *TicketRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *TicketRequest) GetChannel() TicketChannel {
	if x != nil {
		return x.Channel
	}
	return TicketChannel_TICKET_CHANNEL_UNSPECIFIED
}

type TicketSelection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Selection ID mush have specific format:
	// "od:<product_id>/<event_id>/<market_id>/<outcome_id>?<specifier1>=<value1>[&<specifierN=valueN>]*"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Odds multiplied by 10000 and rounded to uint value.
	Odds uint64 `protobuf:"varint,3,opt,name=odds,proto3" json:"odds,omitempty"`
}

func (x *TicketSelection) Reset() {
	*x = TicketSelection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketSelection) ProtoMessage() {}

func (x *TicketSelection) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketSelection.ProtoReflect.Descriptor instead.
func (*TicketSelection) Descriptor() ([]byte, []int) {
	return file_ots_ticket_proto_rawDescGZIP(), []int{1}
}

func (x *TicketSelection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TicketSelection) GetOdds() uint64 {
	if x != nil {
		return x.Odds
	}
	return 0
}

type TicketCustomer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bookmaker unique user ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Bettor IP address.
	Ip *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	// Bettor unique device id from which ticket was placed.
	DeviceId *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// Supported language ISO-639-1 code.
	Language string `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *TicketCustomer) Reset() {
	*x = TicketCustomer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketCustomer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketCustomer) ProtoMessage() {}

func (x *TicketCustomer) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketCustomer.ProtoReflect.Descriptor instead.
func (*TicketCustomer) Descriptor() ([]byte, []int) {
	return file_ots_ticket_proto_rawDescGZIP(), []int{2}
}

func (x *TicketCustomer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TicketCustomer) GetIp() *wrapperspb.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *TicketCustomer) GetDeviceId() *wrapperspb.StringValue {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

func (x *TicketCustomer) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type Bet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bet id for multi-bets ticket.
	Id *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Bonus part of the bet.
	Bonus *BetBonus `protobuf:"bytes,2,opt,name=bonus,proto3" json:"bonus,omitempty"`
	// Stake of the bet.
	Stake *BetStake `protobuf:"bytes,3,opt,name=stake,proto3" json:"stake,omitempty"`
	// Reoffer bet id.
	ReofferId *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=reoffer_id,json=reofferId,proto3" json:"reoffer_id,omitempty"`
	// Total wins for all generated combinations for the bet. We use this for validation purposes.
	TotalWins *wrapperspb.UInt64Value `protobuf:"bytes,5,opt,name=total_wins,json=totalWins,proto3" json:"total_wins,omitempty"`
	// Array of all the systems in the bet ([0] is not allowed, use [fold] instead).
	Systems []uint32 `protobuf:"varint,6,rep,packed,name=systems,proto3" json:"systems,omitempty"`
	//  Array of selections which form this bet, if omitted all selections are used.
	Selections []*BetSelection `protobuf:"bytes,7,rep,name=selections,proto3" json:"selections,omitempty"`
}

func (x *Bet) Reset() {
	*x = Bet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bet) ProtoMessage() {}

func (x *Bet) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bet.ProtoReflect.Descriptor instead.
func (*Bet) Descriptor() ([]byte, []int) {
	return file_ots_ticket_proto_rawDescGZIP(), []int{3}
}

func (x *Bet) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Bet) GetBonus() *BetBonus {
	if x != nil {
		return x.Bonus
	}
	return nil
}

func (x *Bet) GetStake() *BetStake {
	if x != nil {
		return x.Stake
	}
	return nil
}

func (x *Bet) GetReofferId() *wrapperspb.StringValue {
	if x != nil {
		return x.ReofferId
	}
	return nil
}

func (x *Bet) GetTotalWins() *wrapperspb.UInt64Value {
	if x != nil {
		return x.TotalWins
	}
	return nil
}

func (x *Bet) GetSystems() []uint32 {
	if x != nil {
		return x.Systems
	}
	return nil
}

func (x *Bet) GetSelections() []*BetSelection {
	if x != nil {
		return x.Selections
	}
	return nil
}

type BetSelection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Selection ID is a link on TicketSelection.ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *BetSelection) Reset() {
	*x = BetSelection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetSelection) ProtoMessage() {}

func (x *BetSelection) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetSelection.ProtoReflect.Descriptor instead.
func (*BetSelection) Descriptor() ([]byte, []int) {
	return file_ots_ticket_proto_rawDescGZIP(), []int{4}
}

func (x *BetSelection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type BetStake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Stake amount. It needs to be multiplied by 10000 and rounded to long value in local currency.
	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	// Stake type - SUM or UNIT.
	Type BetStakeType `protobuf:"varint,2,opt,name=type,proto3,enum=ots.enums.BetStakeType" json:"type,omitempty"`
}

func (x *BetStake) Reset() {
	*x = BetStake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetStake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetStake) ProtoMessage() {}

func (x *BetStake) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetStake.ProtoReflect.Descriptor instead.
func (*BetStake) Descriptor() ([]byte, []int) {
	return file_ots_ticket_proto_rawDescGZIP(), []int{5}
}

func (x *BetStake) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *BetStake) GetType() BetStakeType {
	if x != nil {
		return x.Type
	}
	return BetStakeType_BET_STAKE_TYPE_UNSPECIFIED
}

type BetBonus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bonus amount to add to the win. It needs to be multiplied by 10000 and rounded to long value in local currency.
	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	// Bonus type - only supported TOTAL for now.
	Type BetBonusType `protobuf:"varint,2,opt,name=type,proto3,enum=ots.enums.BetBonusType" json:"type,omitempty"`
	// Bonus payout mode. Typically used for system bets - only supported ALL for now (means all bets has to be winning).
	Mode BetBonusMode `protobuf:"varint,3,opt,name=mode,proto3,enum=ots.enums.BetBonusMode" json:"mode,omitempty"`
}

func (x *BetBonus) Reset() {
	*x = BetBonus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetBonus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetBonus) ProtoMessage() {}

func (x *BetBonus) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetBonus.ProtoReflect.Descriptor instead.
func (*BetBonus) Descriptor() ([]byte, []int) {
	return file_ots_ticket_proto_rawDescGZIP(), []int{6}
}

func (x *BetBonus) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *BetBonus) GetType() BetBonusType {
	if x != nil {
		return x.Type
	}
	return BetBonusType_BET_BONUS_TYPE_UNSPECIFIED
}

func (x *BetBonus) GetMode() BetBonusMode {
	if x != nil {
		return x.Mode
	}
	return BetBonusMode_BET_BONUS_MODE_UNSPECIFIED
}

type TicketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ticket id from operatorâ€™s system.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Acceptance status - PENDING | REJECTED | ACCEPTED.
	TicketStatus AcceptanceStatus `protobuf:"varint,2,opt,name=ticket_status,json=ticketStatus,proto3,enum=ots.enums.AcceptanceStatus" json:"ticket_status,omitempty"`
	// Information about rejection/acception reason.
	Reason *Reason `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	// Bet level rejection details.
	BetInfo []*TicketResponseBetInfo `protobuf:"bytes,4,rep,name=bet_info,json=betInfo,proto3" json:"bet_info,omitempty"`
	// Exchange rate used to convert currency to EUR multiplied by 10 000 and rounded to long value.
	ExchangeRate *wrapperspb.UInt64Value `protobuf:"bytes,5,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"`
	// Alternative odds used to accept bet.
	AutoAcceptedOdds []*AutoAcceptedOdds `protobuf:"bytes,6,rep,name=auto_accepted_odds,json=autoAcceptedOdds,proto3" json:"auto_accepted_odds,omitempty"`
}

func (x *TicketResponse) Reset() {
	*x = TicketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketResponse) ProtoMessage() {}

func (x *TicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketResponse.ProtoReflect.Descriptor instead.
func (*TicketResponse) Descriptor() ([]byte, []int) {
	return file_ots_ticket_proto_rawDescGZIP(), []int{7}
}

func (x *TicketResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TicketResponse) GetTicketStatus() AcceptanceStatus {
	if x != nil {
		return x.TicketStatus
	}
	return AcceptanceStatus_ACCEPTANCE_STATUS_UNSPECIFIED
}

func (x *TicketResponse) GetReason() *Reason {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *TicketResponse) GetBetInfo() []*TicketResponseBetInfo {
	if x != nil {
		return x.BetInfo
	}
	return nil
}

func (x *TicketResponse) GetExchangeRate() *wrapperspb.UInt64Value {
	if x != nil {
		return x.ExchangeRate
	}
	return nil
}

func (x *TicketResponse) GetAutoAcceptedOdds() []*AutoAcceptedOdds {
	if x != nil {
		return x.AutoAcceptedOdds
	}
	return nil
}

type AutoAcceptedOdds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Selection id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Odds which were ticked placed multiplied by 10 000 and rounded to long value.
	RequestedOdds uint64 `protobuf:"varint,2,opt,name=requested_odds,json=requestedOdds,proto3" json:"requested_odds,omitempty"`
	// Odds which were ticked accepted multiplied by 10 000 and rounded to long value.
	UsedOdds uint64 `protobuf:"varint,3,opt,name=used_odds,json=usedOdds,proto3" json:"used_odds,omitempty"`
}

func (x *AutoAcceptedOdds) Reset() {
	*x = AutoAcceptedOdds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoAcceptedOdds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoAcceptedOdds) ProtoMessage() {}

func (x *AutoAcceptedOdds) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoAcceptedOdds.ProtoReflect.Descriptor instead.
func (*AutoAcceptedOdds) Descriptor() ([]byte, []int) {
	return file_ots_ticket_proto_rawDescGZIP(), []int{8}
}

func (x *AutoAcceptedOdds) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AutoAcceptedOdds) GetRequestedOdds() uint64 {
	if x != nil {
		return x.RequestedOdds
	}
	return 0
}

func (x *AutoAcceptedOdds) GetUsedOdds() uint64 {
	if x != nil {
		return x.UsedOdds
	}
	return 0
}

type TicketResponseBetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique bet id from operatorâ€™s system.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Information about rejection/acception reason.
	Reason *Reason `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	// Information about the reoffer stake.
	Reoffer *ResponseReoffer `protobuf:"bytes,3,opt,name=reoffer,proto3" json:"reoffer,omitempty"`
	// Selection info level rejection details - selection id and odds.
	SelectionsInfo []*RejectedSelection `protobuf:"bytes,4,rep,name=selections_info,json=selectionsInfo,proto3" json:"selections_info,omitempty"`
}

func (x *TicketResponseBetInfo) Reset() {
	*x = TicketResponseBetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketResponseBetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketResponseBetInfo) ProtoMessage() {}

func (x *TicketResponseBetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketResponseBetInfo.ProtoReflect.Descriptor instead.
func (*TicketResponseBetInfo) Descriptor() ([]byte, []int) {
	return file_ots_ticket_proto_rawDescGZIP(), []int{9}
}

func (x *TicketResponseBetInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TicketResponseBetInfo) GetReason() *Reason {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *TicketResponseBetInfo) GetReoffer() *ResponseReoffer {
	if x != nil {
		return x.Reoffer
	}
	return nil
}

func (x *TicketResponseBetInfo) GetSelectionsInfo() []*RejectedSelection {
	if x != nil {
		return x.SelectionsInfo
	}
	return nil
}

type RejectedSelection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Selection id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Information about rejection reason.
	Reason        *Reason        `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	RejectionInfo *RejectionInfo `protobuf:"bytes,3,opt,name=rejection_info,json=rejectionInfo,proto3" json:"rejection_info,omitempty"`
}

func (x *RejectedSelection) Reset() {
	*x = RejectedSelection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectedSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectedSelection) ProtoMessage() {}

func (x *RejectedSelection) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectedSelection.ProtoReflect.Descriptor instead.
func (*RejectedSelection) Descriptor() ([]byte, []int) {
	return file_ots_ticket_proto_rawDescGZIP(), []int{10}
}

func (x *RejectedSelection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RejectedSelection) GetReason() *Reason {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *RejectedSelection) GetRejectionInfo() *RejectionInfo {
	if x != nil {
		return x.RejectionInfo
	}
	return nil
}

type RejectionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Odds uint64 `protobuf:"varint,2,opt,name=odds,proto3" json:"odds,omitempty"`
}

func (x *RejectionInfo) Reset() {
	*x = RejectionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectionInfo) ProtoMessage() {}

func (x *RejectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectionInfo.ProtoReflect.Descriptor instead.
func (*RejectionInfo) Descriptor() ([]byte, []int) {
	return file_ots_ticket_proto_rawDescGZIP(), []int{11}
}

func (x *RejectionInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RejectionInfo) GetOdds() uint64 {
	if x != nil {
		return x.Odds
	}
	return 0
}

type ResponseReoffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stake uint64 `protobuf:"varint,1,opt,name=stake,proto3" json:"stake,omitempty"`
}

func (x *ResponseReoffer) Reset() {
	*x = ResponseReoffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseReoffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseReoffer) ProtoMessage() {}

func (x *ResponseReoffer) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseReoffer.ProtoReflect.Descriptor instead.
func (*ResponseReoffer) Descriptor() ([]byte, []int) {
	return file_ots_ticket_proto_rawDescGZIP(), []int{12}
}

func (x *ResponseReoffer) GetStake() uint64 {
	if x != nil {
		return x.Stake
	}
	return 0
}

var File_ots_ticket_proto protoreflect.FileDescriptor

var file_ots_ticket_proto_rawDesc = []byte{
	0x0a, 0x10, 0x6f, 0x74, 0x73, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x03, 0x6f, 0x74, 0x73, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x6f, 0x74, 0x73, 0x2f, 0x65, 0x6e,
	0x75, 0x6d, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11,
	0x6f, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x87, 0x05, 0x0a, 0x0d, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a,
	0x04, 0x62, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x6f, 0x74,
	0x73, 0x2e, 0x42, 0x65, 0x74, 0x52, 0x04, 0x62, 0x65, 0x74, 0x73, 0x12, 0x49, 0x0a, 0x12, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x6f, 0x64, 0x64, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4f, 0x64, 0x64, 0x73, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x10, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4f, 0x64, 0x64, 0x73,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x08, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0a, 0x72, 0x65, 0x6f, 0x66, 0x66, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x72, 0x65, 0x6f, 0x66, 0x66, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x53, 0x0a, 0x0f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x74, 0x73,
	0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x35, 0x0a, 0x0f, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x6f, 0x64,
	0x64, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x0e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x02, 0x69, 0x70, 0x12, 0x39, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0xc4, 0x02, 0x0a, 0x03, 0x42,
	0x65, 0x74, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x23, 0x0a, 0x05, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x42, 0x65, 0x74, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x05,
	0x62, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x42, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x72, 0x65,
	0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x72, 0x65,
	0x6f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x77, 0x69, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x57, 0x69, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x31,
	0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x42, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x1e, 0x0a, 0x0c, 0x42, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x4d, 0x0a, 0x08, 0x42, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x42, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x7a, 0x0a, 0x08, 0x42, 0x65, 0x74, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x42, 0x65, 0x74,
	0x42, 0x6f, 0x6e, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x2b, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x6f, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x42, 0x65, 0x74, 0x42, 0x6f, 0x6e,
	0x75, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xc6, 0x02, 0x0a,
	0x0e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x40, 0x0a, 0x0d, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x23, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x08, 0x62, 0x65, 0x74, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x62, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a,
	0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x43, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65,
	0x64, 0x5f, 0x6f, 0x64, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f,
	0x74, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x4f,
	0x64, 0x64, 0x73, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65,
	0x64, 0x4f, 0x64, 0x64, 0x73, 0x22, 0x66, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x65, 0x64, 0x4f, 0x64, 0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x64, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4f, 0x64, 0x64, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x64, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x75, 0x73, 0x65, 0x64, 0x4f, 0x64, 0x64, 0x73, 0x22, 0xbd, 0x01,
	0x0a, 0x15, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x07,
	0x72, 0x65, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6f, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x6f, 0x66,
	0x66, 0x65, 0x72, 0x52, 0x07, 0x72, 0x65, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x83, 0x01,
	0x0a, 0x11, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0e, 0x72, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x33, 0x0a, 0x0d, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x22, 0x27, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x42, 0x1d, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x64, 0x64, 0x69, 0x6e, 0x2e, 0x6f,
	0x74, 0x73, 0x5a, 0x0c, 0x6f, 0x64, 0x64, 0x69, 0x6e, 0x2e, 0x67, 0x67, 0x2f, 0x6f, 0x74, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ots_ticket_proto_rawDescOnce sync.Once
	file_ots_ticket_proto_rawDescData = file_ots_ticket_proto_rawDesc
)

func file_ots_ticket_proto_rawDescGZIP() []byte {
	file_ots_ticket_proto_rawDescOnce.Do(func() {
		file_ots_ticket_proto_rawDescData = protoimpl.X.CompressGZIP(file_ots_ticket_proto_rawDescData)
	})
	return file_ots_ticket_proto_rawDescData
}

var file_ots_ticket_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_ots_ticket_proto_goTypes = []interface{}{
	(*TicketRequest)(nil),          // 0: ots.TicketRequest
	(*TicketSelection)(nil),        // 1: ots.TicketSelection
	(*TicketCustomer)(nil),         // 2: ots.TicketCustomer
	(*Bet)(nil),                    // 3: ots.Bet
	(*BetSelection)(nil),           // 4: ots.BetSelection
	(*BetStake)(nil),               // 5: ots.BetStake
	(*BetBonus)(nil),               // 6: ots.BetBonus
	(*TicketResponse)(nil),         // 7: ots.TicketResponse
	(*AutoAcceptedOdds)(nil),       // 8: ots.AutoAcceptedOdds
	(*TicketResponseBetInfo)(nil),  // 9: ots.TicketResponseBetInfo
	(*RejectedSelection)(nil),      // 10: ots.RejectedSelection
	(*RejectionInfo)(nil),          // 11: ots.RejectionInfo
	(*ResponseReoffer)(nil),        // 12: ots.ResponseReoffer
	nil,                            // 13: ots.TicketRequest.SelectionsEntry
	(*timestamppb.Timestamp)(nil),  // 14: google.protobuf.Timestamp
	(AcceptOddsChange)(0),          // 15: ots.enums.AcceptOddsChange
	(*wrapperspb.StringValue)(nil), // 16: google.protobuf.StringValue
	(TicketChannel)(0),             // 17: ots.enums.TicketChannel
	(*wrapperspb.UInt64Value)(nil), // 18: google.protobuf.UInt64Value
	(BetStakeType)(0),              // 19: ots.enums.BetStakeType
	(BetBonusType)(0),              // 20: ots.enums.BetBonusType
	(BetBonusMode)(0),              // 21: ots.enums.BetBonusMode
	(AcceptanceStatus)(0),          // 22: ots.enums.AcceptanceStatus
	(*Reason)(nil),                 // 23: ots.Reason
}
var file_ots_ticket_proto_depIdxs = []int32{
	14, // 0: ots.TicketRequest.timestamp:type_name -> google.protobuf.Timestamp
	3,  // 1: ots.TicketRequest.bets:type_name -> ots.Bet
	15, // 2: ots.TicketRequest.accept_odds_change:type_name -> ots.enums.AcceptOddsChange
	2,  // 3: ots.TicketRequest.customer:type_name -> ots.TicketCustomer
	16, // 4: ots.TicketRequest.reoffer_id:type_name -> google.protobuf.StringValue
	13, // 5: ots.TicketRequest.selections:type_name -> ots.TicketRequest.SelectionsEntry
	16, // 6: ots.TicketRequest.location_id:type_name -> google.protobuf.StringValue
	17, // 7: ots.TicketRequest.channel:type_name -> ots.enums.TicketChannel
	16, // 8: ots.TicketCustomer.ip:type_name -> google.protobuf.StringValue
	16, // 9: ots.TicketCustomer.device_id:type_name -> google.protobuf.StringValue
	16, // 10: ots.Bet.id:type_name -> google.protobuf.StringValue
	6,  // 11: ots.Bet.bonus:type_name -> ots.BetBonus
	5,  // 12: ots.Bet.stake:type_name -> ots.BetStake
	16, // 13: ots.Bet.reoffer_id:type_name -> google.protobuf.StringValue
	18, // 14: ots.Bet.total_wins:type_name -> google.protobuf.UInt64Value
	4,  // 15: ots.Bet.selections:type_name -> ots.BetSelection
	19, // 16: ots.BetStake.type:type_name -> ots.enums.BetStakeType
	20, // 17: ots.BetBonus.type:type_name -> ots.enums.BetBonusType
	21, // 18: ots.BetBonus.mode:type_name -> ots.enums.BetBonusMode
	22, // 19: ots.TicketResponse.ticket_status:type_name -> ots.enums.AcceptanceStatus
	23, // 20: ots.TicketResponse.reason:type_name -> ots.Reason
	9,  // 21: ots.TicketResponse.bet_info:type_name -> ots.TicketResponseBetInfo
	18, // 22: ots.TicketResponse.exchange_rate:type_name -> google.protobuf.UInt64Value
	8,  // 23: ots.TicketResponse.auto_accepted_odds:type_name -> ots.AutoAcceptedOdds
	23, // 24: ots.TicketResponseBetInfo.reason:type_name -> ots.Reason
	12, // 25: ots.TicketResponseBetInfo.reoffer:type_name -> ots.ResponseReoffer
	10, // 26: ots.TicketResponseBetInfo.selections_info:type_name -> ots.RejectedSelection
	23, // 27: ots.RejectedSelection.reason:type_name -> ots.Reason
	11, // 28: ots.RejectedSelection.rejection_info:type_name -> ots.RejectionInfo
	1,  // 29: ots.TicketRequest.SelectionsEntry.value:type_name -> ots.TicketSelection
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_ots_ticket_proto_init() }
func file_ots_ticket_proto_init() {
	if File_ots_ticket_proto != nil {
		return
	}
	file_ots_enum_enums_proto_init()
	file_ots_commons_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ots_ticket_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketSelection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketCustomer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetSelection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetStake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetBonus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoAcceptedOdds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketResponseBetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejectedSelection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejectionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseReoffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ots_ticket_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ots_ticket_proto_goTypes,
		DependencyIndexes: file_ots_ticket_proto_depIdxs,
		MessageInfos:      file_ots_ticket_proto_msgTypes,
	}.Build()
	File_ots_ticket_proto = out.File
	file_ots_ticket_proto_rawDesc = nil
	file_ots_ticket_proto_goTypes = nil
	file_ots_ticket_proto_depIdxs = nil
}
