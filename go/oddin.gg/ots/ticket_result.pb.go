// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.3
// source: ots/ticket_result.proto

package ots

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TicketResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*TicketResultRequest_Ticket
	//	*TicketResultRequest_Keepalive
	//	*TicketResultRequest_After
	Data isTicketResultRequest_Data `protobuf_oneof:"data"`
}

func (x *TicketResultRequest) Reset() {
	*x = TicketResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_result_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketResultRequest) ProtoMessage() {}

func (x *TicketResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_result_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketResultRequest.ProtoReflect.Descriptor instead.
func (*TicketResultRequest) Descriptor() ([]byte, []int) {
	return file_ots_ticket_result_proto_rawDescGZIP(), []int{0}
}

func (m *TicketResultRequest) GetData() isTicketResultRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *TicketResultRequest) GetTicket() *TicketResult {
	if x, ok := x.GetData().(*TicketResultRequest_Ticket); ok {
		return x.Ticket
	}
	return nil
}

func (x *TicketResultRequest) GetKeepalive() *StreamKeepalive {
	if x, ok := x.GetData().(*TicketResultRequest_Keepalive); ok {
		return x.Keepalive
	}
	return nil
}

func (x *TicketResultRequest) GetAfter() *TicketsAfter {
	if x, ok := x.GetData().(*TicketResultRequest_After); ok {
		return x.After
	}
	return nil
}

type isTicketResultRequest_Data interface {
	isTicketResultRequest_Data()
}

type TicketResultRequest_Ticket struct {
	Ticket *TicketResult `protobuf:"bytes,1,opt,name=ticket,proto3,oneof"`
}

type TicketResultRequest_Keepalive struct {
	Keepalive *StreamKeepalive `protobuf:"bytes,2,opt,name=keepalive,proto3,oneof"`
}

type TicketResultRequest_After struct {
	After *TicketsAfter `protobuf:"bytes,3,opt,name=after,proto3,oneof"`
}

func (*TicketResultRequest_Ticket) isTicketResultRequest_Data() {}

func (*TicketResultRequest_Keepalive) isTicketResultRequest_Data() {}

func (*TicketResultRequest_After) isTicketResultRequest_Data() {}

type TicketResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*TicketResultResponse_State
	//	*TicketResultResponse_Keepalive
	//	*TicketResultResponse_After
	Data isTicketResultResponse_Data `protobuf_oneof:"data"`
}

func (x *TicketResultResponse) Reset() {
	*x = TicketResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_result_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketResultResponse) ProtoMessage() {}

func (x *TicketResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_result_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketResultResponse.ProtoReflect.Descriptor instead.
func (*TicketResultResponse) Descriptor() ([]byte, []int) {
	return file_ots_ticket_result_proto_rawDescGZIP(), []int{1}
}

func (m *TicketResultResponse) GetData() isTicketResultResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *TicketResultResponse) GetState() *TicketResultState {
	if x, ok := x.GetData().(*TicketResultResponse_State); ok {
		return x.State
	}
	return nil
}

func (x *TicketResultResponse) GetKeepalive() *StreamKeepalive {
	if x, ok := x.GetData().(*TicketResultResponse_Keepalive); ok {
		return x.Keepalive
	}
	return nil
}

func (x *TicketResultResponse) GetAfter() *TicketsAfterState {
	if x, ok := x.GetData().(*TicketResultResponse_After); ok {
		return x.After
	}
	return nil
}

type isTicketResultResponse_Data interface {
	isTicketResultResponse_Data()
}

type TicketResultResponse_State struct {
	State *TicketResultState `protobuf:"bytes,1,opt,name=state,proto3,oneof"`
}

type TicketResultResponse_Keepalive struct {
	Keepalive *StreamKeepalive `protobuf:"bytes,2,opt,name=keepalive,proto3,oneof"`
}

type TicketResultResponse_After struct {
	After *TicketsAfterState `protobuf:"bytes,3,opt,name=after,proto3,oneof"`
}

func (*TicketResultResponse_State) isTicketResultResponse_Data() {}

func (*TicketResultResponse_Keepalive) isTicketResultResponse_Data() {}

func (*TicketResultResponse_After) isTicketResultResponse_Data() {}

type TicketsAfter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique request id
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Request tickets after this date
	After *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=after,proto3" json:"after,omitempty"`
}

func (x *TicketsAfter) Reset() {
	*x = TicketsAfter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_result_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketsAfter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketsAfter) ProtoMessage() {}

func (x *TicketsAfter) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_result_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketsAfter.ProtoReflect.Descriptor instead.
func (*TicketsAfter) Descriptor() ([]byte, []int) {
	return file_ots_ticket_result_proto_rawDescGZIP(), []int{2}
}

func (x *TicketsAfter) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *TicketsAfter) GetAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.After
	}
	return nil
}

type TicketsAfterState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique request id from TicketsAfter request
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Request tickets after this date
	After *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=after,proto3" json:"after,omitempty"`
	// Tickets resulted after timestamp
	Tickets []*TicketResultState `protobuf:"bytes,3,rep,name=tickets,proto3" json:"tickets,omitempty"`
	// Information about possible error during processing
	Error *TicketResultError `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	// Information about batching - batch size is fixed to 100 tickets
	BatchInfo *TicketsAfterState_BatchInfo `protobuf:"bytes,5,opt,name=batch_info,json=batchInfo,proto3" json:"batch_info,omitempty"`
}

func (x *TicketsAfterState) Reset() {
	*x = TicketsAfterState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_result_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketsAfterState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketsAfterState) ProtoMessage() {}

func (x *TicketsAfterState) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_result_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketsAfterState.ProtoReflect.Descriptor instead.
func (*TicketsAfterState) Descriptor() ([]byte, []int) {
	return file_ots_ticket_result_proto_rawDescGZIP(), []int{3}
}

func (x *TicketsAfterState) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *TicketsAfterState) GetAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.After
	}
	return nil
}

func (x *TicketsAfterState) GetTickets() []*TicketResultState {
	if x != nil {
		return x.Tickets
	}
	return nil
}

func (x *TicketsAfterState) GetError() *TicketResultError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TicketsAfterState) GetBatchInfo() *TicketsAfterState_BatchInfo {
	if x != nil {
		return x.BatchInfo
	}
	return nil
}

type TicketResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ticket id from operatorâ€™s system.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TicketResult) Reset() {
	*x = TicketResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_result_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketResult) ProtoMessage() {}

func (x *TicketResult) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_result_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketResult.ProtoReflect.Descriptor instead.
func (*TicketResult) Descriptor() ([]byte, []int) {
	return file_ots_ticket_result_proto_rawDescGZIP(), []int{4}
}

func (x *TicketResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type TicketResultStateBetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique bet id from operatorâ€™s system.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Information about rejection reason - WON | VOIDED | LOST | PENDING_LOST | NOT_RESULTED | REJECTED.
	BetStatus ResultingStatus `protobuf:"varint,2,opt,name=bet_status,json=betStatus,proto3,enum=ots.enums.ResultingStatus" json:"bet_status,omitempty"`
	// Won amount on bet converted by ticket exchange_rate and multiplied by 10000 and rounded to uint value.
	WonAmount *wrapperspb.UInt64Value `protobuf:"bytes,3,opt,name=won_amount,json=wonAmount,proto3" json:"won_amount,omitempty"`
}

func (x *TicketResultStateBetInfo) Reset() {
	*x = TicketResultStateBetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_result_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketResultStateBetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketResultStateBetInfo) ProtoMessage() {}

func (x *TicketResultStateBetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_result_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketResultStateBetInfo.ProtoReflect.Descriptor instead.
func (*TicketResultStateBetInfo) Descriptor() ([]byte, []int) {
	return file_ots_ticket_result_proto_rawDescGZIP(), []int{5}
}

func (x *TicketResultStateBetInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TicketResultStateBetInfo) GetBetStatus() ResultingStatus {
	if x != nil {
		return x.BetStatus
	}
	return ResultingStatus_RESULTING_STATUS_UNSPECIFIED
}

func (x *TicketResultStateBetInfo) GetWonAmount() *wrapperspb.UInt64Value {
	if x != nil {
		return x.WonAmount
	}
	return nil
}

type TicketResultStateSelectionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Information about selection status - WON | HALF_WON | VOIDED | LOST | HALF_LOST | PENDING_LOST | NOT_RESULTED | REJECTED.
	SelectionStatus ResultingStatus `protobuf:"varint,1,opt,name=selection_status,json=selectionStatus,proto3,enum=ots.enums.ResultingStatus" json:"selection_status,omitempty"`
}

func (x *TicketResultStateSelectionInfo) Reset() {
	*x = TicketResultStateSelectionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_result_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketResultStateSelectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketResultStateSelectionInfo) ProtoMessage() {}

func (x *TicketResultStateSelectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_result_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketResultStateSelectionInfo.ProtoReflect.Descriptor instead.
func (*TicketResultStateSelectionInfo) Descriptor() ([]byte, []int) {
	return file_ots_ticket_result_proto_rawDescGZIP(), []int{6}
}

func (x *TicketResultStateSelectionInfo) GetSelectionStatus() ResultingStatus {
	if x != nil {
		return x.SelectionStatus
	}
	return ResultingStatus_RESULTING_STATUS_UNSPECIFIED
}

type TicketResultError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    ReasonCode              `protobuf:"varint,1,opt,name=code,proto3,enum=ots.enums.ReasonCode" json:"code,omitempty"`
	Message *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *TicketResultError) Reset() {
	*x = TicketResultError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_result_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketResultError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketResultError) ProtoMessage() {}

func (x *TicketResultError) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_result_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketResultError.ProtoReflect.Descriptor instead.
func (*TicketResultError) Descriptor() ([]byte, []int) {
	return file_ots_ticket_result_proto_rawDescGZIP(), []int{7}
}

func (x *TicketResultError) GetCode() ReasonCode {
	if x != nil {
		return x.Code
	}
	return ReasonCode_REASON_CODE_UNSPECIFIED
}

func (x *TicketResultError) GetMessage() *wrapperspb.StringValue {
	if x != nil {
		return x.Message
	}
	return nil
}

type TicketResultState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ticket id from operatorâ€™s system.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Resulting status - WON | VOIDED | LOST | PENDING_LOST | NOT_RESULTED | REJECTED.
	TicketStatus ResultingStatus `protobuf:"varint,2,opt,name=ticket_status,json=ticketStatus,proto3,enum=ots.enums.ResultingStatus" json:"ticket_status,omitempty"`
	// Won amount of ticket converted by exchange_rate and multiplied by 10000 and rounded to uint value.
	WonAmount *wrapperspb.UInt64Value `protobuf:"bytes,3,opt,name=won_amount,json=wonAmount,proto3" json:"won_amount,omitempty"`
	// Rejection details of bets.
	BetInfo map[string]*TicketResultStateBetInfo `protobuf:"bytes,4,rep,name=bet_info,json=betInfo,proto3" json:"bet_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Rejection details of selections.
	SelectionInfo map[string]*TicketResultStateSelectionInfo `protobuf:"bytes,5,rep,name=selection_info,json=selectionInfo,proto3" json:"selection_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Exchange rate used to convert currency to EUR multiplied by 10 000 and rounded to long value.
	ExchangeRate uint64 `protobuf:"varint,6,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"`
	// Ticket result timestamp.
	ResultedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=resulted_at,json=resultedAt,proto3" json:"resulted_at,omitempty"`
	// Information about possible error during processing.
	Error *TicketResultError `protobuf:"bytes,8,opt,name=error,proto3" json:"error,omitempty"`
	// Ticket modified_at timestamp.
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
}

func (x *TicketResultState) Reset() {
	*x = TicketResultState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_result_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketResultState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketResultState) ProtoMessage() {}

func (x *TicketResultState) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_result_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketResultState.ProtoReflect.Descriptor instead.
func (*TicketResultState) Descriptor() ([]byte, []int) {
	return file_ots_ticket_result_proto_rawDescGZIP(), []int{8}
}

func (x *TicketResultState) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TicketResultState) GetTicketStatus() ResultingStatus {
	if x != nil {
		return x.TicketStatus
	}
	return ResultingStatus_RESULTING_STATUS_UNSPECIFIED
}

func (x *TicketResultState) GetWonAmount() *wrapperspb.UInt64Value {
	if x != nil {
		return x.WonAmount
	}
	return nil
}

func (x *TicketResultState) GetBetInfo() map[string]*TicketResultStateBetInfo {
	if x != nil {
		return x.BetInfo
	}
	return nil
}

func (x *TicketResultState) GetSelectionInfo() map[string]*TicketResultStateSelectionInfo {
	if x != nil {
		return x.SelectionInfo
	}
	return nil
}

func (x *TicketResultState) GetExchangeRate() uint64 {
	if x != nil {
		return x.ExchangeRate
	}
	return 0
}

func (x *TicketResultState) GetResultedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ResultedAt
	}
	return nil
}

func (x *TicketResultState) GetError() *TicketResultError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TicketResultState) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

type TicketsAfterState_BatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actual uint32 `protobuf:"varint,1,opt,name=actual,proto3" json:"actual,omitempty"`
	Total  uint32 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *TicketsAfterState_BatchInfo) Reset() {
	*x = TicketsAfterState_BatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ots_ticket_result_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketsAfterState_BatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketsAfterState_BatchInfo) ProtoMessage() {}

func (x *TicketsAfterState_BatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ots_ticket_result_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketsAfterState_BatchInfo.ProtoReflect.Descriptor instead.
func (*TicketsAfterState_BatchInfo) Descriptor() ([]byte, []int) {
	return file_ots_ticket_result_proto_rawDescGZIP(), []int{3, 0}
}

func (x *TicketsAfterState_BatchInfo) GetActual() uint32 {
	if x != nil {
		return x.Actual
	}
	return 0
}

func (x *TicketsAfterState_BatchInfo) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_ots_ticket_result_proto protoreflect.FileDescriptor

var file_ots_ticket_result_proto_rawDesc = []byte{
	0x0a, 0x17, 0x6f, 0x74, 0x73, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x6f, 0x74, 0x73, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x14, 0x6f, 0x74, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x6f, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xab, 0x01, 0x0a, 0x13, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2b, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x34, 0x0a,
	0x09, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4b, 0x65, 0x65,
	0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c,
	0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x42, 0x06,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb4, 0x01, 0x0a, 0x14, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x34, 0x0a, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4b,
	0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6b, 0x65, 0x65, 0x70,
	0x61, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x05,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5f, 0x0a,
	0x0c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x05,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x22, 0xc0,
	0x02, 0x0a, 0x11, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x07, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x07,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x74, 0x73, 0x2e,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x39, 0x0a, 0x09, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0x1e, 0x0a, 0x0c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0xa2, 0x01, 0x0a, 0x18, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39,
	0x0a, 0x0a, 0x62, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09,
	0x62, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x77, 0x6f, 0x6e,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x77, 0x6f, 0x6e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x67, 0x0a, 0x1e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a, 0x10, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x76, 0x0a, 0x11, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x36, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc2, 0x05, 0x0a, 0x11, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a,
	0x0d, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b,
	0x0a, 0x0a, 0x77, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x09, 0x77, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x62,
	0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6f, 0x74, 0x73, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x62, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x50, 0x0a, 0x0e, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a,
	0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x2c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6f, 0x74, 0x73, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3b, 0x0a,
	0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x59, 0x0a, 0x0c, 0x42, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x74,
	0x73, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x65, 0x0a, 0x12, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f,
	0x74, 0x73, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x1d, 0x0a, 0x0d,
	0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x64, 0x64, 0x69, 0x6e, 0x2e, 0x6f, 0x74, 0x73, 0x5a, 0x0c, 0x6f,
	0x64, 0x64, 0x69, 0x6e, 0x2e, 0x67, 0x67, 0x2f, 0x6f, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_ots_ticket_result_proto_rawDescOnce sync.Once
	file_ots_ticket_result_proto_rawDescData = file_ots_ticket_result_proto_rawDesc
)

func file_ots_ticket_result_proto_rawDescGZIP() []byte {
	file_ots_ticket_result_proto_rawDescOnce.Do(func() {
		file_ots_ticket_result_proto_rawDescData = protoimpl.X.CompressGZIP(file_ots_ticket_result_proto_rawDescData)
	})
	return file_ots_ticket_result_proto_rawDescData
}

var file_ots_ticket_result_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_ots_ticket_result_proto_goTypes = []interface{}{
	(*TicketResultRequest)(nil),            // 0: ots.TicketResultRequest
	(*TicketResultResponse)(nil),           // 1: ots.TicketResultResponse
	(*TicketsAfter)(nil),                   // 2: ots.TicketsAfter
	(*TicketsAfterState)(nil),              // 3: ots.TicketsAfterState
	(*TicketResult)(nil),                   // 4: ots.TicketResult
	(*TicketResultStateBetInfo)(nil),       // 5: ots.TicketResultStateBetInfo
	(*TicketResultStateSelectionInfo)(nil), // 6: ots.TicketResultStateSelectionInfo
	(*TicketResultError)(nil),              // 7: ots.TicketResultError
	(*TicketResultState)(nil),              // 8: ots.TicketResultState
	(*TicketsAfterState_BatchInfo)(nil),    // 9: ots.TicketsAfterState.BatchInfo
	nil,                                    // 10: ots.TicketResultState.BetInfoEntry
	nil,                                    // 11: ots.TicketResultState.SelectionInfoEntry
	(*StreamKeepalive)(nil),                // 12: ots.StreamKeepalive
	(*timestamppb.Timestamp)(nil),          // 13: google.protobuf.Timestamp
	(ResultingStatus)(0),                   // 14: ots.enums.ResultingStatus
	(*wrapperspb.UInt64Value)(nil),         // 15: google.protobuf.UInt64Value
	(ReasonCode)(0),                        // 16: ots.enums.ReasonCode
	(*wrapperspb.StringValue)(nil),         // 17: google.protobuf.StringValue
}
var file_ots_ticket_result_proto_depIdxs = []int32{
	4,  // 0: ots.TicketResultRequest.ticket:type_name -> ots.TicketResult
	12, // 1: ots.TicketResultRequest.keepalive:type_name -> ots.StreamKeepalive
	2,  // 2: ots.TicketResultRequest.after:type_name -> ots.TicketsAfter
	8,  // 3: ots.TicketResultResponse.state:type_name -> ots.TicketResultState
	12, // 4: ots.TicketResultResponse.keepalive:type_name -> ots.StreamKeepalive
	3,  // 5: ots.TicketResultResponse.after:type_name -> ots.TicketsAfterState
	13, // 6: ots.TicketsAfter.after:type_name -> google.protobuf.Timestamp
	13, // 7: ots.TicketsAfterState.after:type_name -> google.protobuf.Timestamp
	8,  // 8: ots.TicketsAfterState.tickets:type_name -> ots.TicketResultState
	7,  // 9: ots.TicketsAfterState.error:type_name -> ots.TicketResultError
	9,  // 10: ots.TicketsAfterState.batch_info:type_name -> ots.TicketsAfterState.BatchInfo
	14, // 11: ots.TicketResultStateBetInfo.bet_status:type_name -> ots.enums.ResultingStatus
	15, // 12: ots.TicketResultStateBetInfo.won_amount:type_name -> google.protobuf.UInt64Value
	14, // 13: ots.TicketResultStateSelectionInfo.selection_status:type_name -> ots.enums.ResultingStatus
	16, // 14: ots.TicketResultError.code:type_name -> ots.enums.ReasonCode
	17, // 15: ots.TicketResultError.message:type_name -> google.protobuf.StringValue
	14, // 16: ots.TicketResultState.ticket_status:type_name -> ots.enums.ResultingStatus
	15, // 17: ots.TicketResultState.won_amount:type_name -> google.protobuf.UInt64Value
	10, // 18: ots.TicketResultState.bet_info:type_name -> ots.TicketResultState.BetInfoEntry
	11, // 19: ots.TicketResultState.selection_info:type_name -> ots.TicketResultState.SelectionInfoEntry
	13, // 20: ots.TicketResultState.resulted_at:type_name -> google.protobuf.Timestamp
	7,  // 21: ots.TicketResultState.error:type_name -> ots.TicketResultError
	13, // 22: ots.TicketResultState.modified_at:type_name -> google.protobuf.Timestamp
	5,  // 23: ots.TicketResultState.BetInfoEntry.value:type_name -> ots.TicketResultStateBetInfo
	6,  // 24: ots.TicketResultState.SelectionInfoEntry.value:type_name -> ots.TicketResultStateSelectionInfo
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_ots_ticket_result_proto_init() }
func file_ots_ticket_result_proto_init() {
	if File_ots_ticket_result_proto != nil {
		return
	}
	file_ots_enum_enums_proto_init()
	file_ots_commons_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ots_ticket_result_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_result_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_result_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketsAfter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_result_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketsAfterState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_result_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_result_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketResultStateBetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_result_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketResultStateSelectionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_result_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketResultError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_result_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketResultState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ots_ticket_result_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketsAfterState_BatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ots_ticket_result_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*TicketResultRequest_Ticket)(nil),
		(*TicketResultRequest_Keepalive)(nil),
		(*TicketResultRequest_After)(nil),
	}
	file_ots_ticket_result_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*TicketResultResponse_State)(nil),
		(*TicketResultResponse_Keepalive)(nil),
		(*TicketResultResponse_After)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ots_ticket_result_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ots_ticket_result_proto_goTypes,
		DependencyIndexes: file_ots_ticket_result_proto_depIdxs,
		MessageInfos:      file_ots_ticket_result_proto_msgTypes,
	}.Build()
	File_ots_ticket_result_proto = out.File
	file_ots_ticket_result_proto_rawDesc = nil
	file_ots_ticket_result_proto_goTypes = nil
	file_ots_ticket_result_proto_depIdxs = nil
}
