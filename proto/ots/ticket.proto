syntax = "proto3";

package ots;

option go_package = "oddin.gg/ots";
option java_package = "com.oddin.ots";

import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";
import "ots/enum/enums.proto";
import "ots/commons.proto";

message TicketRequest {
  oneof data {
    Ticket ticket = 1;
    StreamKeepalive keepalive = 2;
  }
}

message TicketResultRequest {
  oneof data {
    TicketResult ticket = 1;
    StreamKeepalive keepalive = 2;
    TicketsAfter after = 3;
  }
}

message TicketResponse {
  oneof data {
    TicketState state = 1;
    StreamKeepalive keepalive = 2;
  }
}

message TicketResultResponse {
  oneof data {
    TicketResultState state = 1;
    StreamKeepalive keepalive = 2;
    TicketsAfterState after = 3;
  }
}

// TicketRequest is used as request for Ticket RPC call.
message Ticket {
  // Unique ticket id from operator’s system.
  string id = 1;

  // Timestamp of request creation.
  google.protobuf.Timestamp timestamp = 2;

  // List of ticket bets.
  repeated Bet bets = 3;

  // Alternative odds used to accept bet.
  enums.AcceptOddsChange accept_odds_change = 4;

  // Total number of combinations to validate against generated combinations.
  uint64 total_combinations = 5;

  // Customer information.
  TicketCustomer customer = 6;

  // Reoffer ticket id.
  google.protobuf.StringValue reoffer_id = 8;

  // Array of selections which form this bet, if omitted all selections are used.
  map<string, TicketSelection> selections = 9;

  // Id of terminal or shop, where bet is received.
  google.protobuf.StringValue location_id = 10;

  // Currency of bets stakes. Must be the same for the whole ticket.
  string currency = 11;

  // Channel from which ticket was placed (internet, terminal, etc..).
  enums.TicketChannel channel = 12;

  google.protobuf.Timestamp lastForeignEventStartTime = 13;

  google.protobuf.Timestamp lastForeignEventEndTime = 14;

  // Stake multiplier for stake - optional value to use instead of 10000
  google.protobuf.UInt64Value stake_multiplier = 15;
}

message TicketSelection {
  // Selection ID mush have specific format:
  // "od:<product_id>/<event_id>/<market_id>/<outcome_id>?<specifier1>=<value1>[&<specifierN=valueN>]*"
  string id = 1;

  // Odds multiplied by 10000 and rounded to uint value.
  uint64 odds = 3;

  // Information about selection origin
  google.protobuf.BoolValue foreign = 4;
}

message TicketCustomer {
  // Bookmaker unique user ID.
  string id = 1;

  // Bettor IP address.
  google.protobuf.StringValue ip = 2;

  // Bettor unique device id from which ticket was placed.
  google.protobuf.StringValue device_id = 3;

  // Supported language ISO-639-1 code.
  string language = 4;

  // Optional bettor nickname
  google.protobuf.StringValue nickname = 5;
}

message Bet {
  // Bet id for multi-bets ticket.
  google.protobuf.StringValue id = 1;

  // Bonus part of the bet.
  BetBonus bonus = 2;

  // Stake of the bet.
  BetStake stake = 3;

  // Reoffer bet id.
  google.protobuf.StringValue reoffer_id = 4 [deprecated = true];

  // Total wins for all generated combinations for the bet. We use this for validation purposes.
  google.protobuf.UInt64Value total_wins = 5;

  // Array of all the systems in the bet ([0] is not allowed, use [fold] instead).
  repeated uint32 systems = 6;

  //  Array of selections which form this bet, if omitted all selections are used.
  repeated BetSelection selections = 7;
}

message BetSelection {
  // Selection ID is a link on TicketSelection.ID.
  string id = 1;
}

message BetStake {
  // Stake amount. It needs to be multiplied by 10000 (or ticket stake multiplier) and rounded to long value in local currency.
  uint64 value = 1;

  // Stake type - SUM or UNIT.
  enums.BetStakeType type = 2;
}

message BetBonus {
  // Bonus amount to add to the win. It needs to be multiplied by 10000 and rounded to long value in local currency.
  uint64 value = 1;

  // Bonus type - only supported TOTAL for now.
  enums.BetBonusType type = 2;

  // Bonus payout mode. Typically used for system bets - only supported ALL for now (means all bets has to be winning).
  enums.BetBonusMode mode = 3;
}

message TicketsAfterState {
  message BatchInfo {
    uint32 actual = 1;
    uint32 total = 2;
  }

  // Unique request id from TicketsAfter request
  string request_id = 1;

  // Request tickets after this date
  google.protobuf.Timestamp after = 2;

  // Tickets resulted after timestamp
  repeated TicketResultState tickets = 3;

  // Information about possible error during processing
  TicketResultError error = 4;

  // Information about batching - batch size is fixed to 100 tickets
  BatchInfo batch_info = 5;
}

message TicketState {
  // Unique ticket id from operator’s system.
  string id = 1;

  // Acceptance status - PENDING | REJECTED | ACCEPTED.
  enums.AcceptanceStatus ticket_status = 2;

  // Information about rejection reason.
  TicketRejectReason reject_reason = 3;

  // Rejection details of bets.
  map<string, TicketResponseBetInfo> bet_info = 4;

  // Rejection details of selections.
  map<string, TicketSelectionRejectReason> selection_info = 7;

  // Exchange rate used to convert currency to EUR multiplied by 10 000 and rounded to long value.
  google.protobuf.UInt64Value exchange_rate = 5;

  // Alternative odds used to accept bet.
  map<string, AutoAcceptedOdds> auto_accepted_odds = 6;

  // Information about the reoffer stake.
  ResponseReoffer reoffer = 8;

  // Total odds for whole ticket
  uint64 total_odds = 9;
}

message AutoAcceptedOdds {
  // Selection id.
  string id = 1;

  // Odds which were ticked placed multiplied by 10 000 and rounded to long value.
  uint64 requested_odds = 2;

  // Odds which were ticked accepted multiplied by 10 000 and rounded to long value.
  uint64 used_odds = 3;
}

message TicketRejectReason {
  enum Code {
    // Not a valid value. Used for blocking 0 as invalid state.
    CODE_UNSPECIFIED = 0;

    // We are having internal problems.
    CODE_INTERNAL = 1;

    // Ticket is not valid.
    CODE_INVALID_ARGUMENT = 2;

    // Ticket already exists in our system.
    CODE_ALREADY_EXISTS = 3;

    // Bet stake is lower then minimum stake.
    CODE_STAKE_TOO_LOW = 4;

    // Bet stake is high then maximal stake.
    CODE_STAKE_TOO_HIGH = 5;

    // Max payout breached.
    CODE_MAX_PAYOUT_BREACHED = 6;

    // Ticket bets are not acceptable, check bet_info field for details.
    CODE_BETS_NOT_ACCEPTABLE = 7;

    // Ticket selections are not acceptable, check selection_info field for details.
    CODE_SELECTIONS_NOT_ACCEPTABLE = 8;

    // Ticket not found in our system.
    CODE_NOT_FOUND = 9;
  }

  // Reason code.
  Code code = 1;

  // Message describing a reason.
  string message = 2;
}

message TicketBetRejectReason {
  enum Code {
    // Not a valid value. Used for blocking 0 as invalid state.
    CODE_UNSPECIFIED = 0;

    // At least one odds in bet is different from current odds.
    CODE_ODDS_CHANGED = 1;

    // At least one selection in bet is not active.
    CODE_SELECTION_NOT_ACTIVE = 2;

    // Bet stake is lower then minimum stake.
    CODE_STAKE_TOO_LOW = 3;

    // Bet stake is high then maximal stake.
    CODE_STAKE_TOO_HIGH = 4;

    // Max payout breached.
    CODE_MAX_PAYOUT_BREACHED = 5;

    // Market liability breached.
    CODE_MARKET_LIABILITY_BREACHED = 6;

    // Bettor liability breached.
    CODE_BETTOR_LIABILITY_BREACHED = 7;

    // Event liability breached.
    CODE_EVENT_LIABILITY_BREACHED = 8;
  }

  // Reason code.
  Code code = 1;

  // Message describing a reason.
  string message = 2;
}

message TicketResponseBetInfo {
  // Unique bet id from operator’s system.
  string id = 1;

  // Information about rejection reason.
  TicketBetRejectReason reject_reason = 2;

  // Information about the reoffer stake.
  ResponseReoffer reoffer = 3;

  // Total odds for whole bet
  uint64 total_odds = 4;
}

message TicketSelectionRejectReason {
  enum Code {
    // Not a valid value. Used for blocking 0 as invalid state.
    CODE_UNSPECIFIED = 0;

    // Selection Odds is different from current odds.
    CODE_ODDS_CHANGED = 1;

    // Selection is not active.
    CODE_NOT_ACTIVE = 2;

    // Selection is not independent.
    CODE_NOT_INDEPENDENT = 3;
  }

  // Reason code.
  Code code = 1;

  // Message describing a reason.
  string message = 2;
}

message ResponseReoffer {
  uint64 stake = 1;
}

message TicketsAfter {
  // Unique request id
  string request_id = 1;
  // Request tickets after this date
  google.protobuf.Timestamp after = 2;
}

message TicketResult {
  // Unique ticket id from operator’s system.
  string id = 1;
}

message TicketResultStateBetInfo {
  // Unique bet id from operator’s system.
  string id = 1;

  // Information about rejection reason - WON | VOIDED | LOST | PENDING_LOST | NOT_RESULTED | REJECTED.
  enums.ResultingStatus bet_status = 2;

  // Won amount on bet converted by ticket exchange_rate and multiplied by 10000 and rounded to uint value.
  google.protobuf.UInt64Value won_amount = 3;
}

message TicketResultStateSelectionInfo {
  // Information about selection status - WON | VOIDED | LOST | PENDING_LOST | NOT_RESULTED | REJECTED.
  enums.ResultingStatus selection_status = 1;
}

message TicketResultError {
  enums.ReasonCode code = 1;
  google.protobuf.StringValue message = 2;
}

message TicketResultState {
  // Unique ticket id from operator’s system.
  string id = 1;

  // Resulting status - WON | VOIDED | LOST | PENDING_LOST | NOT_RESULTED | REJECTED.
  enums.ResultingStatus ticket_status = 2;

  // Won amount of ticket converted by exchange_rate and multiplied by 10000 and rounded to uint value.
  google.protobuf.UInt64Value won_amount = 3;

  // Rejection details of bets.
  map<string, TicketResultStateBetInfo> bet_info = 4;

  // Rejection details of selections.
  map<string, TicketResultStateSelectionInfo> selection_info = 5;

  // Exchange rate used to convert currency to EUR multiplied by 10 000 and rounded to long value.
  uint64  exchange_rate = 6;

  // Ticket result timestamp.
  google.protobuf.Timestamp resulted_at = 7;

  // Information about possible error during processing
  TicketResultError error = 8;
}