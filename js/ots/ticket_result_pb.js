// source: ots/ticket_result.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js');
goog.object.extend(proto, google_protobuf_wrappers_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var ots_enum_enums_pb = require('../ots/enum/enums_pb.js');
goog.object.extend(proto, ots_enum_enums_pb);
var ots_commons_pb = require('../ots/commons_pb.js');
goog.object.extend(proto, ots_commons_pb);
goog.exportSymbol('proto.ots.TicketResult', null, global);
goog.exportSymbol('proto.ots.TicketResultError', null, global);
goog.exportSymbol('proto.ots.TicketResultRequest', null, global);
goog.exportSymbol('proto.ots.TicketResultRequest.DataCase', null, global);
goog.exportSymbol('proto.ots.TicketResultResponse', null, global);
goog.exportSymbol('proto.ots.TicketResultResponse.DataCase', null, global);
goog.exportSymbol('proto.ots.TicketResultState', null, global);
goog.exportSymbol('proto.ots.TicketResultStateBetInfo', null, global);
goog.exportSymbol('proto.ots.TicketResultStateSelectionInfo', null, global);
goog.exportSymbol('proto.ots.TicketsAfter', null, global);
goog.exportSymbol('proto.ots.TicketsAfterState', null, global);
goog.exportSymbol('proto.ots.TicketsAfterState.BatchInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ots.TicketResultRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ots.TicketResultRequest.oneofGroups_);
};
goog.inherits(proto.ots.TicketResultRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ots.TicketResultRequest.displayName = 'proto.ots.TicketResultRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ots.TicketResultResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ots.TicketResultResponse.oneofGroups_);
};
goog.inherits(proto.ots.TicketResultResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ots.TicketResultResponse.displayName = 'proto.ots.TicketResultResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ots.TicketsAfter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ots.TicketsAfter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ots.TicketsAfter.displayName = 'proto.ots.TicketsAfter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ots.TicketsAfterState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ots.TicketsAfterState.repeatedFields_, null);
};
goog.inherits(proto.ots.TicketsAfterState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ots.TicketsAfterState.displayName = 'proto.ots.TicketsAfterState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ots.TicketsAfterState.BatchInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ots.TicketsAfterState.BatchInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ots.TicketsAfterState.BatchInfo.displayName = 'proto.ots.TicketsAfterState.BatchInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ots.TicketResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ots.TicketResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ots.TicketResult.displayName = 'proto.ots.TicketResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ots.TicketResultStateBetInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ots.TicketResultStateBetInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ots.TicketResultStateBetInfo.displayName = 'proto.ots.TicketResultStateBetInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ots.TicketResultStateSelectionInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ots.TicketResultStateSelectionInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ots.TicketResultStateSelectionInfo.displayName = 'proto.ots.TicketResultStateSelectionInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ots.TicketResultError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ots.TicketResultError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ots.TicketResultError.displayName = 'proto.ots.TicketResultError';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ots.TicketResultState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ots.TicketResultState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ots.TicketResultState.displayName = 'proto.ots.TicketResultState';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ots.TicketResultRequest.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.ots.TicketResultRequest.DataCase = {
  DATA_NOT_SET: 0,
  TICKET: 1,
  KEEPALIVE: 2,
  AFTER: 3
};

/**
 * @return {proto.ots.TicketResultRequest.DataCase}
 */
proto.ots.TicketResultRequest.prototype.getDataCase = function() {
  return /** @type {proto.ots.TicketResultRequest.DataCase} */(jspb.Message.computeOneofCase(this, proto.ots.TicketResultRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ots.TicketResultRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ots.TicketResultRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ots.TicketResultRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.TicketResultRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticket: (f = msg.getTicket()) && proto.ots.TicketResult.toObject(includeInstance, f),
    keepalive: (f = msg.getKeepalive()) && ots_commons_pb.StreamKeepalive.toObject(includeInstance, f),
    after: (f = msg.getAfter()) && proto.ots.TicketsAfter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ots.TicketResultRequest}
 */
proto.ots.TicketResultRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ots.TicketResultRequest;
  return proto.ots.TicketResultRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ots.TicketResultRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ots.TicketResultRequest}
 */
proto.ots.TicketResultRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ots.TicketResult;
      reader.readMessage(value,proto.ots.TicketResult.deserializeBinaryFromReader);
      msg.setTicket(value);
      break;
    case 2:
      var value = new ots_commons_pb.StreamKeepalive;
      reader.readMessage(value,ots_commons_pb.StreamKeepalive.deserializeBinaryFromReader);
      msg.setKeepalive(value);
      break;
    case 3:
      var value = new proto.ots.TicketsAfter;
      reader.readMessage(value,proto.ots.TicketsAfter.deserializeBinaryFromReader);
      msg.setAfter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ots.TicketResultRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ots.TicketResultRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ots.TicketResultRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.TicketResultRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTicket();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ots.TicketResult.serializeBinaryToWriter
    );
  }
  f = message.getKeepalive();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      ots_commons_pb.StreamKeepalive.serializeBinaryToWriter
    );
  }
  f = message.getAfter();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ots.TicketsAfter.serializeBinaryToWriter
    );
  }
};


/**
 * optional TicketResult ticket = 1;
 * @return {?proto.ots.TicketResult}
 */
proto.ots.TicketResultRequest.prototype.getTicket = function() {
  return /** @type{?proto.ots.TicketResult} */ (
    jspb.Message.getWrapperField(this, proto.ots.TicketResult, 1));
};


/**
 * @param {?proto.ots.TicketResult|undefined} value
 * @return {!proto.ots.TicketResultRequest} returns this
*/
proto.ots.TicketResultRequest.prototype.setTicket = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.ots.TicketResultRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ots.TicketResultRequest} returns this
 */
proto.ots.TicketResultRequest.prototype.clearTicket = function() {
  return this.setTicket(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ots.TicketResultRequest.prototype.hasTicket = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional StreamKeepalive keepalive = 2;
 * @return {?proto.ots.StreamKeepalive}
 */
proto.ots.TicketResultRequest.prototype.getKeepalive = function() {
  return /** @type{?proto.ots.StreamKeepalive} */ (
    jspb.Message.getWrapperField(this, ots_commons_pb.StreamKeepalive, 2));
};


/**
 * @param {?proto.ots.StreamKeepalive|undefined} value
 * @return {!proto.ots.TicketResultRequest} returns this
*/
proto.ots.TicketResultRequest.prototype.setKeepalive = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.ots.TicketResultRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ots.TicketResultRequest} returns this
 */
proto.ots.TicketResultRequest.prototype.clearKeepalive = function() {
  return this.setKeepalive(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ots.TicketResultRequest.prototype.hasKeepalive = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TicketsAfter after = 3;
 * @return {?proto.ots.TicketsAfter}
 */
proto.ots.TicketResultRequest.prototype.getAfter = function() {
  return /** @type{?proto.ots.TicketsAfter} */ (
    jspb.Message.getWrapperField(this, proto.ots.TicketsAfter, 3));
};


/**
 * @param {?proto.ots.TicketsAfter|undefined} value
 * @return {!proto.ots.TicketResultRequest} returns this
*/
proto.ots.TicketResultRequest.prototype.setAfter = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.ots.TicketResultRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ots.TicketResultRequest} returns this
 */
proto.ots.TicketResultRequest.prototype.clearAfter = function() {
  return this.setAfter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ots.TicketResultRequest.prototype.hasAfter = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ots.TicketResultResponse.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.ots.TicketResultResponse.DataCase = {
  DATA_NOT_SET: 0,
  STATE: 1,
  KEEPALIVE: 2,
  AFTER: 3
};

/**
 * @return {proto.ots.TicketResultResponse.DataCase}
 */
proto.ots.TicketResultResponse.prototype.getDataCase = function() {
  return /** @type {proto.ots.TicketResultResponse.DataCase} */(jspb.Message.computeOneofCase(this, proto.ots.TicketResultResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ots.TicketResultResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ots.TicketResultResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ots.TicketResultResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.TicketResultResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: (f = msg.getState()) && proto.ots.TicketResultState.toObject(includeInstance, f),
    keepalive: (f = msg.getKeepalive()) && ots_commons_pb.StreamKeepalive.toObject(includeInstance, f),
    after: (f = msg.getAfter()) && proto.ots.TicketsAfterState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ots.TicketResultResponse}
 */
proto.ots.TicketResultResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ots.TicketResultResponse;
  return proto.ots.TicketResultResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ots.TicketResultResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ots.TicketResultResponse}
 */
proto.ots.TicketResultResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ots.TicketResultState;
      reader.readMessage(value,proto.ots.TicketResultState.deserializeBinaryFromReader);
      msg.setState(value);
      break;
    case 2:
      var value = new ots_commons_pb.StreamKeepalive;
      reader.readMessage(value,ots_commons_pb.StreamKeepalive.deserializeBinaryFromReader);
      msg.setKeepalive(value);
      break;
    case 3:
      var value = new proto.ots.TicketsAfterState;
      reader.readMessage(value,proto.ots.TicketsAfterState.deserializeBinaryFromReader);
      msg.setAfter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ots.TicketResultResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ots.TicketResultResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ots.TicketResultResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.TicketResultResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ots.TicketResultState.serializeBinaryToWriter
    );
  }
  f = message.getKeepalive();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      ots_commons_pb.StreamKeepalive.serializeBinaryToWriter
    );
  }
  f = message.getAfter();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ots.TicketsAfterState.serializeBinaryToWriter
    );
  }
};


/**
 * optional TicketResultState state = 1;
 * @return {?proto.ots.TicketResultState}
 */
proto.ots.TicketResultResponse.prototype.getState = function() {
  return /** @type{?proto.ots.TicketResultState} */ (
    jspb.Message.getWrapperField(this, proto.ots.TicketResultState, 1));
};


/**
 * @param {?proto.ots.TicketResultState|undefined} value
 * @return {!proto.ots.TicketResultResponse} returns this
*/
proto.ots.TicketResultResponse.prototype.setState = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.ots.TicketResultResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ots.TicketResultResponse} returns this
 */
proto.ots.TicketResultResponse.prototype.clearState = function() {
  return this.setState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ots.TicketResultResponse.prototype.hasState = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional StreamKeepalive keepalive = 2;
 * @return {?proto.ots.StreamKeepalive}
 */
proto.ots.TicketResultResponse.prototype.getKeepalive = function() {
  return /** @type{?proto.ots.StreamKeepalive} */ (
    jspb.Message.getWrapperField(this, ots_commons_pb.StreamKeepalive, 2));
};


/**
 * @param {?proto.ots.StreamKeepalive|undefined} value
 * @return {!proto.ots.TicketResultResponse} returns this
*/
proto.ots.TicketResultResponse.prototype.setKeepalive = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.ots.TicketResultResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ots.TicketResultResponse} returns this
 */
proto.ots.TicketResultResponse.prototype.clearKeepalive = function() {
  return this.setKeepalive(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ots.TicketResultResponse.prototype.hasKeepalive = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TicketsAfterState after = 3;
 * @return {?proto.ots.TicketsAfterState}
 */
proto.ots.TicketResultResponse.prototype.getAfter = function() {
  return /** @type{?proto.ots.TicketsAfterState} */ (
    jspb.Message.getWrapperField(this, proto.ots.TicketsAfterState, 3));
};


/**
 * @param {?proto.ots.TicketsAfterState|undefined} value
 * @return {!proto.ots.TicketResultResponse} returns this
*/
proto.ots.TicketResultResponse.prototype.setAfter = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.ots.TicketResultResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ots.TicketResultResponse} returns this
 */
proto.ots.TicketResultResponse.prototype.clearAfter = function() {
  return this.setAfter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ots.TicketResultResponse.prototype.hasAfter = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ots.TicketsAfter.prototype.toObject = function(opt_includeInstance) {
  return proto.ots.TicketsAfter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ots.TicketsAfter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.TicketsAfter.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    after: (f = msg.getAfter()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ots.TicketsAfter}
 */
proto.ots.TicketsAfter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ots.TicketsAfter;
  return proto.ots.TicketsAfter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ots.TicketsAfter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ots.TicketsAfter}
 */
proto.ots.TicketsAfter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setAfter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ots.TicketsAfter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ots.TicketsAfter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ots.TicketsAfter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.TicketsAfter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAfter();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string request_id = 1;
 * @return {string}
 */
proto.ots.TicketsAfter.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ots.TicketsAfter} returns this
 */
proto.ots.TicketsAfter.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp after = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.ots.TicketsAfter.prototype.getAfter = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.ots.TicketsAfter} returns this
*/
proto.ots.TicketsAfter.prototype.setAfter = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ots.TicketsAfter} returns this
 */
proto.ots.TicketsAfter.prototype.clearAfter = function() {
  return this.setAfter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ots.TicketsAfter.prototype.hasAfter = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ots.TicketsAfterState.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ots.TicketsAfterState.prototype.toObject = function(opt_includeInstance) {
  return proto.ots.TicketsAfterState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ots.TicketsAfterState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.TicketsAfterState.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    after: (f = msg.getAfter()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    ticketsList: jspb.Message.toObjectList(msg.getTicketsList(),
    proto.ots.TicketResultState.toObject, includeInstance),
    error: (f = msg.getError()) && proto.ots.TicketResultError.toObject(includeInstance, f),
    batchInfo: (f = msg.getBatchInfo()) && proto.ots.TicketsAfterState.BatchInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ots.TicketsAfterState}
 */
proto.ots.TicketsAfterState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ots.TicketsAfterState;
  return proto.ots.TicketsAfterState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ots.TicketsAfterState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ots.TicketsAfterState}
 */
proto.ots.TicketsAfterState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setAfter(value);
      break;
    case 3:
      var value = new proto.ots.TicketResultState;
      reader.readMessage(value,proto.ots.TicketResultState.deserializeBinaryFromReader);
      msg.addTickets(value);
      break;
    case 4:
      var value = new proto.ots.TicketResultError;
      reader.readMessage(value,proto.ots.TicketResultError.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 5:
      var value = new proto.ots.TicketsAfterState.BatchInfo;
      reader.readMessage(value,proto.ots.TicketsAfterState.BatchInfo.deserializeBinaryFromReader);
      msg.setBatchInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ots.TicketsAfterState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ots.TicketsAfterState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ots.TicketsAfterState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.TicketsAfterState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAfter();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getTicketsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ots.TicketResultState.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ots.TicketResultError.serializeBinaryToWriter
    );
  }
  f = message.getBatchInfo();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ots.TicketsAfterState.BatchInfo.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ots.TicketsAfterState.BatchInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ots.TicketsAfterState.BatchInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ots.TicketsAfterState.BatchInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.TicketsAfterState.BatchInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    actual: jspb.Message.getFieldWithDefault(msg, 1, 0),
    total: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ots.TicketsAfterState.BatchInfo}
 */
proto.ots.TicketsAfterState.BatchInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ots.TicketsAfterState.BatchInfo;
  return proto.ots.TicketsAfterState.BatchInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ots.TicketsAfterState.BatchInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ots.TicketsAfterState.BatchInfo}
 */
proto.ots.TicketsAfterState.BatchInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setActual(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ots.TicketsAfterState.BatchInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ots.TicketsAfterState.BatchInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ots.TicketsAfterState.BatchInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.TicketsAfterState.BatchInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActual();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 actual = 1;
 * @return {number}
 */
proto.ots.TicketsAfterState.BatchInfo.prototype.getActual = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ots.TicketsAfterState.BatchInfo} returns this
 */
proto.ots.TicketsAfterState.BatchInfo.prototype.setActual = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 total = 2;
 * @return {number}
 */
proto.ots.TicketsAfterState.BatchInfo.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ots.TicketsAfterState.BatchInfo} returns this
 */
proto.ots.TicketsAfterState.BatchInfo.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string request_id = 1;
 * @return {string}
 */
proto.ots.TicketsAfterState.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ots.TicketsAfterState} returns this
 */
proto.ots.TicketsAfterState.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp after = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.ots.TicketsAfterState.prototype.getAfter = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.ots.TicketsAfterState} returns this
*/
proto.ots.TicketsAfterState.prototype.setAfter = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ots.TicketsAfterState} returns this
 */
proto.ots.TicketsAfterState.prototype.clearAfter = function() {
  return this.setAfter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ots.TicketsAfterState.prototype.hasAfter = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated TicketResultState tickets = 3;
 * @return {!Array<!proto.ots.TicketResultState>}
 */
proto.ots.TicketsAfterState.prototype.getTicketsList = function() {
  return /** @type{!Array<!proto.ots.TicketResultState>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ots.TicketResultState, 3));
};


/**
 * @param {!Array<!proto.ots.TicketResultState>} value
 * @return {!proto.ots.TicketsAfterState} returns this
*/
proto.ots.TicketsAfterState.prototype.setTicketsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ots.TicketResultState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ots.TicketResultState}
 */
proto.ots.TicketsAfterState.prototype.addTickets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ots.TicketResultState, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ots.TicketsAfterState} returns this
 */
proto.ots.TicketsAfterState.prototype.clearTicketsList = function() {
  return this.setTicketsList([]);
};


/**
 * optional TicketResultError error = 4;
 * @return {?proto.ots.TicketResultError}
 */
proto.ots.TicketsAfterState.prototype.getError = function() {
  return /** @type{?proto.ots.TicketResultError} */ (
    jspb.Message.getWrapperField(this, proto.ots.TicketResultError, 4));
};


/**
 * @param {?proto.ots.TicketResultError|undefined} value
 * @return {!proto.ots.TicketsAfterState} returns this
*/
proto.ots.TicketsAfterState.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ots.TicketsAfterState} returns this
 */
proto.ots.TicketsAfterState.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ots.TicketsAfterState.prototype.hasError = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional BatchInfo batch_info = 5;
 * @return {?proto.ots.TicketsAfterState.BatchInfo}
 */
proto.ots.TicketsAfterState.prototype.getBatchInfo = function() {
  return /** @type{?proto.ots.TicketsAfterState.BatchInfo} */ (
    jspb.Message.getWrapperField(this, proto.ots.TicketsAfterState.BatchInfo, 5));
};


/**
 * @param {?proto.ots.TicketsAfterState.BatchInfo|undefined} value
 * @return {!proto.ots.TicketsAfterState} returns this
*/
proto.ots.TicketsAfterState.prototype.setBatchInfo = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ots.TicketsAfterState} returns this
 */
proto.ots.TicketsAfterState.prototype.clearBatchInfo = function() {
  return this.setBatchInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ots.TicketsAfterState.prototype.hasBatchInfo = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ots.TicketResult.prototype.toObject = function(opt_includeInstance) {
  return proto.ots.TicketResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ots.TicketResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.TicketResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ots.TicketResult}
 */
proto.ots.TicketResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ots.TicketResult;
  return proto.ots.TicketResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ots.TicketResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ots.TicketResult}
 */
proto.ots.TicketResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ots.TicketResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ots.TicketResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ots.TicketResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.TicketResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ots.TicketResult.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ots.TicketResult} returns this
 */
proto.ots.TicketResult.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ots.TicketResultStateBetInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ots.TicketResultStateBetInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ots.TicketResultStateBetInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.TicketResultStateBetInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    betStatus: jspb.Message.getFieldWithDefault(msg, 2, 0),
    wonAmount: (f = msg.getWonAmount()) && google_protobuf_wrappers_pb.UInt64Value.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ots.TicketResultStateBetInfo}
 */
proto.ots.TicketResultStateBetInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ots.TicketResultStateBetInfo;
  return proto.ots.TicketResultStateBetInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ots.TicketResultStateBetInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ots.TicketResultStateBetInfo}
 */
proto.ots.TicketResultStateBetInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.ots.enums.ResultingStatus} */ (reader.readEnum());
      msg.setBetStatus(value);
      break;
    case 3:
      var value = new google_protobuf_wrappers_pb.UInt64Value;
      reader.readMessage(value,google_protobuf_wrappers_pb.UInt64Value.deserializeBinaryFromReader);
      msg.setWonAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ots.TicketResultStateBetInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ots.TicketResultStateBetInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ots.TicketResultStateBetInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.TicketResultStateBetInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBetStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getWonAmount();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_wrappers_pb.UInt64Value.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ots.TicketResultStateBetInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ots.TicketResultStateBetInfo} returns this
 */
proto.ots.TicketResultStateBetInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional enums.ResultingStatus bet_status = 2;
 * @return {!proto.ots.enums.ResultingStatus}
 */
proto.ots.TicketResultStateBetInfo.prototype.getBetStatus = function() {
  return /** @type {!proto.ots.enums.ResultingStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.ots.enums.ResultingStatus} value
 * @return {!proto.ots.TicketResultStateBetInfo} returns this
 */
proto.ots.TicketResultStateBetInfo.prototype.setBetStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional google.protobuf.UInt64Value won_amount = 3;
 * @return {?proto.google.protobuf.UInt64Value}
 */
proto.ots.TicketResultStateBetInfo.prototype.getWonAmount = function() {
  return /** @type{?proto.google.protobuf.UInt64Value} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.UInt64Value, 3));
};


/**
 * @param {?proto.google.protobuf.UInt64Value|undefined} value
 * @return {!proto.ots.TicketResultStateBetInfo} returns this
*/
proto.ots.TicketResultStateBetInfo.prototype.setWonAmount = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ots.TicketResultStateBetInfo} returns this
 */
proto.ots.TicketResultStateBetInfo.prototype.clearWonAmount = function() {
  return this.setWonAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ots.TicketResultStateBetInfo.prototype.hasWonAmount = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ots.TicketResultStateSelectionInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ots.TicketResultStateSelectionInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ots.TicketResultStateSelectionInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.TicketResultStateSelectionInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    selectionStatus: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ots.TicketResultStateSelectionInfo}
 */
proto.ots.TicketResultStateSelectionInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ots.TicketResultStateSelectionInfo;
  return proto.ots.TicketResultStateSelectionInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ots.TicketResultStateSelectionInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ots.TicketResultStateSelectionInfo}
 */
proto.ots.TicketResultStateSelectionInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ots.enums.ResultingStatus} */ (reader.readEnum());
      msg.setSelectionStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ots.TicketResultStateSelectionInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ots.TicketResultStateSelectionInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ots.TicketResultStateSelectionInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.TicketResultStateSelectionInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSelectionStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional enums.ResultingStatus selection_status = 1;
 * @return {!proto.ots.enums.ResultingStatus}
 */
proto.ots.TicketResultStateSelectionInfo.prototype.getSelectionStatus = function() {
  return /** @type {!proto.ots.enums.ResultingStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ots.enums.ResultingStatus} value
 * @return {!proto.ots.TicketResultStateSelectionInfo} returns this
 */
proto.ots.TicketResultStateSelectionInfo.prototype.setSelectionStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ots.TicketResultError.prototype.toObject = function(opt_includeInstance) {
  return proto.ots.TicketResultError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ots.TicketResultError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.TicketResultError.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: (f = msg.getMessage()) && google_protobuf_wrappers_pb.StringValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ots.TicketResultError}
 */
proto.ots.TicketResultError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ots.TicketResultError;
  return proto.ots.TicketResultError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ots.TicketResultError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ots.TicketResultError}
 */
proto.ots.TicketResultError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ots.enums.ReasonCode} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = new google_protobuf_wrappers_pb.StringValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.StringValue.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ots.TicketResultError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ots.TicketResultError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ots.TicketResultError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.TicketResultError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_wrappers_pb.StringValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional enums.ReasonCode code = 1;
 * @return {!proto.ots.enums.ReasonCode}
 */
proto.ots.TicketResultError.prototype.getCode = function() {
  return /** @type {!proto.ots.enums.ReasonCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ots.enums.ReasonCode} value
 * @return {!proto.ots.TicketResultError} returns this
 */
proto.ots.TicketResultError.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional google.protobuf.StringValue message = 2;
 * @return {?proto.google.protobuf.StringValue}
 */
proto.ots.TicketResultError.prototype.getMessage = function() {
  return /** @type{?proto.google.protobuf.StringValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.StringValue, 2));
};


/**
 * @param {?proto.google.protobuf.StringValue|undefined} value
 * @return {!proto.ots.TicketResultError} returns this
*/
proto.ots.TicketResultError.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ots.TicketResultError} returns this
 */
proto.ots.TicketResultError.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ots.TicketResultError.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ots.TicketResultState.prototype.toObject = function(opt_includeInstance) {
  return proto.ots.TicketResultState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ots.TicketResultState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.TicketResultState.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ticketStatus: jspb.Message.getFieldWithDefault(msg, 2, 0),
    wonAmount: (f = msg.getWonAmount()) && google_protobuf_wrappers_pb.UInt64Value.toObject(includeInstance, f),
    betInfoMap: (f = msg.getBetInfoMap()) ? f.toObject(includeInstance, proto.ots.TicketResultStateBetInfo.toObject) : [],
    selectionInfoMap: (f = msg.getSelectionInfoMap()) ? f.toObject(includeInstance, proto.ots.TicketResultStateSelectionInfo.toObject) : [],
    exchangeRate: jspb.Message.getFieldWithDefault(msg, 6, 0),
    resultedAt: (f = msg.getResultedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.ots.TicketResultError.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ots.TicketResultState}
 */
proto.ots.TicketResultState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ots.TicketResultState;
  return proto.ots.TicketResultState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ots.TicketResultState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ots.TicketResultState}
 */
proto.ots.TicketResultState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.ots.enums.ResultingStatus} */ (reader.readEnum());
      msg.setTicketStatus(value);
      break;
    case 3:
      var value = new google_protobuf_wrappers_pb.UInt64Value;
      reader.readMessage(value,google_protobuf_wrappers_pb.UInt64Value.deserializeBinaryFromReader);
      msg.setWonAmount(value);
      break;
    case 4:
      var value = msg.getBetInfoMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.ots.TicketResultStateBetInfo.deserializeBinaryFromReader, "", new proto.ots.TicketResultStateBetInfo());
         });
      break;
    case 5:
      var value = msg.getSelectionInfoMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.ots.TicketResultStateSelectionInfo.deserializeBinaryFromReader, "", new proto.ots.TicketResultStateSelectionInfo());
         });
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setExchangeRate(value);
      break;
    case 7:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setResultedAt(value);
      break;
    case 8:
      var value = new proto.ots.TicketResultError;
      reader.readMessage(value,proto.ots.TicketResultError.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ots.TicketResultState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ots.TicketResultState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ots.TicketResultState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.TicketResultState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTicketStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getWonAmount();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_wrappers_pb.UInt64Value.serializeBinaryToWriter
    );
  }
  f = message.getBetInfoMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.ots.TicketResultStateBetInfo.serializeBinaryToWriter);
  }
  f = message.getSelectionInfoMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.ots.TicketResultStateSelectionInfo.serializeBinaryToWriter);
  }
  f = message.getExchangeRate();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getResultedAt();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.ots.TicketResultError.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ots.TicketResultState.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ots.TicketResultState} returns this
 */
proto.ots.TicketResultState.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional enums.ResultingStatus ticket_status = 2;
 * @return {!proto.ots.enums.ResultingStatus}
 */
proto.ots.TicketResultState.prototype.getTicketStatus = function() {
  return /** @type {!proto.ots.enums.ResultingStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.ots.enums.ResultingStatus} value
 * @return {!proto.ots.TicketResultState} returns this
 */
proto.ots.TicketResultState.prototype.setTicketStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional google.protobuf.UInt64Value won_amount = 3;
 * @return {?proto.google.protobuf.UInt64Value}
 */
proto.ots.TicketResultState.prototype.getWonAmount = function() {
  return /** @type{?proto.google.protobuf.UInt64Value} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.UInt64Value, 3));
};


/**
 * @param {?proto.google.protobuf.UInt64Value|undefined} value
 * @return {!proto.ots.TicketResultState} returns this
*/
proto.ots.TicketResultState.prototype.setWonAmount = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ots.TicketResultState} returns this
 */
proto.ots.TicketResultState.prototype.clearWonAmount = function() {
  return this.setWonAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ots.TicketResultState.prototype.hasWonAmount = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * map<string, TicketResultStateBetInfo> bet_info = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.ots.TicketResultStateBetInfo>}
 */
proto.ots.TicketResultState.prototype.getBetInfoMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.ots.TicketResultStateBetInfo>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.ots.TicketResultStateBetInfo));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ots.TicketResultState} returns this
 */
proto.ots.TicketResultState.prototype.clearBetInfoMap = function() {
  this.getBetInfoMap().clear();
  return this;
};


/**
 * map<string, TicketResultStateSelectionInfo> selection_info = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.ots.TicketResultStateSelectionInfo>}
 */
proto.ots.TicketResultState.prototype.getSelectionInfoMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.ots.TicketResultStateSelectionInfo>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      proto.ots.TicketResultStateSelectionInfo));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ots.TicketResultState} returns this
 */
proto.ots.TicketResultState.prototype.clearSelectionInfoMap = function() {
  this.getSelectionInfoMap().clear();
  return this;
};


/**
 * optional uint64 exchange_rate = 6;
 * @return {number}
 */
proto.ots.TicketResultState.prototype.getExchangeRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.ots.TicketResultState} returns this
 */
proto.ots.TicketResultState.prototype.setExchangeRate = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional google.protobuf.Timestamp resulted_at = 7;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.ots.TicketResultState.prototype.getResultedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 7));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.ots.TicketResultState} returns this
*/
proto.ots.TicketResultState.prototype.setResultedAt = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ots.TicketResultState} returns this
 */
proto.ots.TicketResultState.prototype.clearResultedAt = function() {
  return this.setResultedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ots.TicketResultState.prototype.hasResultedAt = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional TicketResultError error = 8;
 * @return {?proto.ots.TicketResultError}
 */
proto.ots.TicketResultState.prototype.getError = function() {
  return /** @type{?proto.ots.TicketResultError} */ (
    jspb.Message.getWrapperField(this, proto.ots.TicketResultError, 8));
};


/**
 * @param {?proto.ots.TicketResultError|undefined} value
 * @return {!proto.ots.TicketResultState} returns this
*/
proto.ots.TicketResultState.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ots.TicketResultState} returns this
 */
proto.ots.TicketResultState.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ots.TicketResultState.prototype.hasError = function() {
  return jspb.Message.getField(this, 8) != null;
};


goog.object.extend(exports, proto.ots);
