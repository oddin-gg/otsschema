// source: ots/bettor.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var ots_commons_pb = require('../ots/commons_pb.js');
goog.object.extend(proto, ots_commons_pb);
goog.exportSymbol('proto.ots.AvailableBettorLabelsRequest', null, global);
goog.exportSymbol('proto.ots.AvailableBettorLabelsResponse', null, global);
goog.exportSymbol('proto.ots.Bettor', null, global);
goog.exportSymbol('proto.ots.BettorUpsertRequest', null, global);
goog.exportSymbol('proto.ots.BettorUpsertRequest.Labels', null, global);
goog.exportSymbol('proto.ots.BettorUpsertResponse', null, global);
goog.exportSymbol('proto.ots.BettorsRequest', null, global);
goog.exportSymbol('proto.ots.BettorsResponse', null, global);
goog.exportSymbol('proto.ots.BettorsResponse.DataCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ots.BettorsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ots.BettorsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ots.BettorsRequest.displayName = 'proto.ots.BettorsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ots.BettorsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ots.BettorsResponse.oneofGroups_);
};
goog.inherits(proto.ots.BettorsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ots.BettorsResponse.displayName = 'proto.ots.BettorsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ots.BettorUpsertRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ots.BettorUpsertRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ots.BettorUpsertRequest.displayName = 'proto.ots.BettorUpsertRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ots.BettorUpsertRequest.Labels = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ots.BettorUpsertRequest.Labels.repeatedFields_, null);
};
goog.inherits(proto.ots.BettorUpsertRequest.Labels, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ots.BettorUpsertRequest.Labels.displayName = 'proto.ots.BettorUpsertRequest.Labels';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ots.BettorUpsertResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ots.BettorUpsertResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ots.BettorUpsertResponse.displayName = 'proto.ots.BettorUpsertResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ots.AvailableBettorLabelsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ots.AvailableBettorLabelsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ots.AvailableBettorLabelsRequest.displayName = 'proto.ots.AvailableBettorLabelsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ots.AvailableBettorLabelsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ots.AvailableBettorLabelsResponse.repeatedFields_, null);
};
goog.inherits(proto.ots.AvailableBettorLabelsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ots.AvailableBettorLabelsResponse.displayName = 'proto.ots.AvailableBettorLabelsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ots.Bettor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ots.Bettor.repeatedFields_, null);
};
goog.inherits(proto.ots.Bettor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ots.Bettor.displayName = 'proto.ots.Bettor';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ots.BettorsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ots.BettorsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ots.BettorsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.BettorsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
recoverSince: (f = msg.getRecoverSince()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ots.BettorsRequest}
 */
proto.ots.BettorsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ots.BettorsRequest;
  return proto.ots.BettorsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ots.BettorsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ots.BettorsRequest}
 */
proto.ots.BettorsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setRecoverSince(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ots.BettorsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ots.BettorsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ots.BettorsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.BettorsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecoverSince();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Timestamp recover_since = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.ots.BettorsRequest.prototype.getRecoverSince = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.ots.BettorsRequest} returns this
*/
proto.ots.BettorsRequest.prototype.setRecoverSince = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ots.BettorsRequest} returns this
 */
proto.ots.BettorsRequest.prototype.clearRecoverSince = function() {
  return this.setRecoverSince(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ots.BettorsRequest.prototype.hasRecoverSince = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ots.BettorsResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.ots.BettorsResponse.DataCase = {
  DATA_NOT_SET: 0,
  BETTOR: 1,
  KEEPALIVE: 2
};

/**
 * @return {proto.ots.BettorsResponse.DataCase}
 */
proto.ots.BettorsResponse.prototype.getDataCase = function() {
  return /** @type {proto.ots.BettorsResponse.DataCase} */(jspb.Message.computeOneofCase(this, proto.ots.BettorsResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ots.BettorsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ots.BettorsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ots.BettorsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.BettorsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
bettor: (f = msg.getBettor()) && proto.ots.Bettor.toObject(includeInstance, f),
keepalive: (f = msg.getKeepalive()) && ots_commons_pb.StreamKeepalive.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ots.BettorsResponse}
 */
proto.ots.BettorsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ots.BettorsResponse;
  return proto.ots.BettorsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ots.BettorsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ots.BettorsResponse}
 */
proto.ots.BettorsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ots.Bettor;
      reader.readMessage(value,proto.ots.Bettor.deserializeBinaryFromReader);
      msg.setBettor(value);
      break;
    case 2:
      var value = new ots_commons_pb.StreamKeepalive;
      reader.readMessage(value,ots_commons_pb.StreamKeepalive.deserializeBinaryFromReader);
      msg.setKeepalive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ots.BettorsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ots.BettorsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ots.BettorsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.BettorsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBettor();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ots.Bettor.serializeBinaryToWriter
    );
  }
  f = message.getKeepalive();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      ots_commons_pb.StreamKeepalive.serializeBinaryToWriter
    );
  }
};


/**
 * optional Bettor bettor = 1;
 * @return {?proto.ots.Bettor}
 */
proto.ots.BettorsResponse.prototype.getBettor = function() {
  return /** @type{?proto.ots.Bettor} */ (
    jspb.Message.getWrapperField(this, proto.ots.Bettor, 1));
};


/**
 * @param {?proto.ots.Bettor|undefined} value
 * @return {!proto.ots.BettorsResponse} returns this
*/
proto.ots.BettorsResponse.prototype.setBettor = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.ots.BettorsResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ots.BettorsResponse} returns this
 */
proto.ots.BettorsResponse.prototype.clearBettor = function() {
  return this.setBettor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ots.BettorsResponse.prototype.hasBettor = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional StreamKeepalive keepalive = 2;
 * @return {?proto.ots.StreamKeepalive}
 */
proto.ots.BettorsResponse.prototype.getKeepalive = function() {
  return /** @type{?proto.ots.StreamKeepalive} */ (
    jspb.Message.getWrapperField(this, ots_commons_pb.StreamKeepalive, 2));
};


/**
 * @param {?proto.ots.StreamKeepalive|undefined} value
 * @return {!proto.ots.BettorsResponse} returns this
*/
proto.ots.BettorsResponse.prototype.setKeepalive = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.ots.BettorsResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ots.BettorsResponse} returns this
 */
proto.ots.BettorsResponse.prototype.clearKeepalive = function() {
  return this.setKeepalive(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ots.BettorsResponse.prototype.hasKeepalive = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ots.BettorUpsertRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ots.BettorUpsertRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ots.BettorUpsertRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.BettorUpsertRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, ""),
bos: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
overAskFactor: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
labels: (f = msg.getLabels()) && proto.ots.BettorUpsertRequest.Labels.toObject(includeInstance, f),
nickname: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ots.BettorUpsertRequest}
 */
proto.ots.BettorUpsertRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ots.BettorUpsertRequest;
  return proto.ots.BettorUpsertRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ots.BettorUpsertRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ots.BettorUpsertRequest}
 */
proto.ots.BettorUpsertRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBos(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOverAskFactor(value);
      break;
    case 4:
      var value = new proto.ots.BettorUpsertRequest.Labels;
      reader.readMessage(value,proto.ots.BettorUpsertRequest.Labels.deserializeBinaryFromReader);
      msg.setLabels(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNickname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ots.BettorUpsertRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ots.BettorUpsertRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ots.BettorUpsertRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.BettorUpsertRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getLabels();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ots.BettorUpsertRequest.Labels.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ots.BettorUpsertRequest.Labels.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ots.BettorUpsertRequest.Labels.prototype.toObject = function(opt_includeInstance) {
  return proto.ots.BettorUpsertRequest.Labels.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ots.BettorUpsertRequest.Labels} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.BettorUpsertRequest.Labels.toObject = function(includeInstance, msg) {
  var f, obj = {
valuesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ots.BettorUpsertRequest.Labels}
 */
proto.ots.BettorUpsertRequest.Labels.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ots.BettorUpsertRequest.Labels;
  return proto.ots.BettorUpsertRequest.Labels.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ots.BettorUpsertRequest.Labels} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ots.BettorUpsertRequest.Labels}
 */
proto.ots.BettorUpsertRequest.Labels.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ots.BettorUpsertRequest.Labels.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ots.BettorUpsertRequest.Labels.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ots.BettorUpsertRequest.Labels} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.BettorUpsertRequest.Labels.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string values = 1;
 * @return {!Array<string>}
 */
proto.ots.BettorUpsertRequest.Labels.prototype.getValuesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ots.BettorUpsertRequest.Labels} returns this
 */
proto.ots.BettorUpsertRequest.Labels.prototype.setValuesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ots.BettorUpsertRequest.Labels} returns this
 */
proto.ots.BettorUpsertRequest.Labels.prototype.addValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ots.BettorUpsertRequest.Labels} returns this
 */
proto.ots.BettorUpsertRequest.Labels.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ots.BettorUpsertRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ots.BettorUpsertRequest} returns this
 */
proto.ots.BettorUpsertRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional float bos = 2;
 * @return {number}
 */
proto.ots.BettorUpsertRequest.prototype.getBos = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ots.BettorUpsertRequest} returns this
 */
proto.ots.BettorUpsertRequest.prototype.setBos = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ots.BettorUpsertRequest} returns this
 */
proto.ots.BettorUpsertRequest.prototype.clearBos = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ots.BettorUpsertRequest.prototype.hasBos = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float over_ask_factor = 3;
 * @return {number}
 */
proto.ots.BettorUpsertRequest.prototype.getOverAskFactor = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ots.BettorUpsertRequest} returns this
 */
proto.ots.BettorUpsertRequest.prototype.setOverAskFactor = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ots.BettorUpsertRequest} returns this
 */
proto.ots.BettorUpsertRequest.prototype.clearOverAskFactor = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ots.BettorUpsertRequest.prototype.hasOverAskFactor = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Labels labels = 4;
 * @return {?proto.ots.BettorUpsertRequest.Labels}
 */
proto.ots.BettorUpsertRequest.prototype.getLabels = function() {
  return /** @type{?proto.ots.BettorUpsertRequest.Labels} */ (
    jspb.Message.getWrapperField(this, proto.ots.BettorUpsertRequest.Labels, 4));
};


/**
 * @param {?proto.ots.BettorUpsertRequest.Labels|undefined} value
 * @return {!proto.ots.BettorUpsertRequest} returns this
*/
proto.ots.BettorUpsertRequest.prototype.setLabels = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ots.BettorUpsertRequest} returns this
 */
proto.ots.BettorUpsertRequest.prototype.clearLabels = function() {
  return this.setLabels(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ots.BettorUpsertRequest.prototype.hasLabels = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string nickname = 5;
 * @return {string}
 */
proto.ots.BettorUpsertRequest.prototype.getNickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ots.BettorUpsertRequest} returns this
 */
proto.ots.BettorUpsertRequest.prototype.setNickname = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ots.BettorUpsertRequest} returns this
 */
proto.ots.BettorUpsertRequest.prototype.clearNickname = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ots.BettorUpsertRequest.prototype.hasNickname = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ots.BettorUpsertResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ots.BettorUpsertResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ots.BettorUpsertResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.BettorUpsertResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
bettor: (f = msg.getBettor()) && proto.ots.Bettor.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ots.BettorUpsertResponse}
 */
proto.ots.BettorUpsertResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ots.BettorUpsertResponse;
  return proto.ots.BettorUpsertResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ots.BettorUpsertResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ots.BettorUpsertResponse}
 */
proto.ots.BettorUpsertResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ots.Bettor;
      reader.readMessage(value,proto.ots.Bettor.deserializeBinaryFromReader);
      msg.setBettor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ots.BettorUpsertResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ots.BettorUpsertResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ots.BettorUpsertResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.BettorUpsertResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBettor();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ots.Bettor.serializeBinaryToWriter
    );
  }
};


/**
 * optional Bettor bettor = 1;
 * @return {?proto.ots.Bettor}
 */
proto.ots.BettorUpsertResponse.prototype.getBettor = function() {
  return /** @type{?proto.ots.Bettor} */ (
    jspb.Message.getWrapperField(this, proto.ots.Bettor, 1));
};


/**
 * @param {?proto.ots.Bettor|undefined} value
 * @return {!proto.ots.BettorUpsertResponse} returns this
*/
proto.ots.BettorUpsertResponse.prototype.setBettor = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ots.BettorUpsertResponse} returns this
 */
proto.ots.BettorUpsertResponse.prototype.clearBettor = function() {
  return this.setBettor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ots.BettorUpsertResponse.prototype.hasBettor = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ots.AvailableBettorLabelsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ots.AvailableBettorLabelsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ots.AvailableBettorLabelsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.AvailableBettorLabelsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ots.AvailableBettorLabelsRequest}
 */
proto.ots.AvailableBettorLabelsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ots.AvailableBettorLabelsRequest;
  return proto.ots.AvailableBettorLabelsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ots.AvailableBettorLabelsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ots.AvailableBettorLabelsRequest}
 */
proto.ots.AvailableBettorLabelsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ots.AvailableBettorLabelsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ots.AvailableBettorLabelsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ots.AvailableBettorLabelsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.AvailableBettorLabelsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ots.AvailableBettorLabelsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ots.AvailableBettorLabelsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ots.AvailableBettorLabelsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ots.AvailableBettorLabelsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.AvailableBettorLabelsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
labelsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ots.AvailableBettorLabelsResponse}
 */
proto.ots.AvailableBettorLabelsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ots.AvailableBettorLabelsResponse;
  return proto.ots.AvailableBettorLabelsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ots.AvailableBettorLabelsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ots.AvailableBettorLabelsResponse}
 */
proto.ots.AvailableBettorLabelsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addLabels(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ots.AvailableBettorLabelsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ots.AvailableBettorLabelsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ots.AvailableBettorLabelsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.AvailableBettorLabelsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabelsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string labels = 1;
 * @return {!Array<string>}
 */
proto.ots.AvailableBettorLabelsResponse.prototype.getLabelsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ots.AvailableBettorLabelsResponse} returns this
 */
proto.ots.AvailableBettorLabelsResponse.prototype.setLabelsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ots.AvailableBettorLabelsResponse} returns this
 */
proto.ots.AvailableBettorLabelsResponse.prototype.addLabels = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ots.AvailableBettorLabelsResponse} returns this
 */
proto.ots.AvailableBettorLabelsResponse.prototype.clearLabelsList = function() {
  return this.setLabelsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ots.Bettor.repeatedFields_ = [6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ots.Bettor.prototype.toObject = function(opt_includeInstance) {
  return proto.ots.Bettor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ots.Bettor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.Bettor.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, ""),
extId: jspb.Message.getFieldWithDefault(msg, 2, ""),
modifiedAt: (f = msg.getModifiedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
bos: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
overAskFactor: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
oddinsLabelsList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
clientsLabelsList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ots.Bettor}
 */
proto.ots.Bettor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ots.Bettor;
  return proto.ots.Bettor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ots.Bettor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ots.Bettor}
 */
proto.ots.Bettor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExtId(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setModifiedAt(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBos(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOverAskFactor(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addOddinsLabels(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addClientsLabels(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ots.Bettor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ots.Bettor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ots.Bettor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.Bettor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExtId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getModifiedAt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getBos();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getOverAskFactor();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getOddinsLabelsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getClientsLabelsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ots.Bettor.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ots.Bettor} returns this
 */
proto.ots.Bettor.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ext_id = 2;
 * @return {string}
 */
proto.ots.Bettor.prototype.getExtId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ots.Bettor} returns this
 */
proto.ots.Bettor.prototype.setExtId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp modified_at = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.ots.Bettor.prototype.getModifiedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.ots.Bettor} returns this
*/
proto.ots.Bettor.prototype.setModifiedAt = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ots.Bettor} returns this
 */
proto.ots.Bettor.prototype.clearModifiedAt = function() {
  return this.setModifiedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ots.Bettor.prototype.hasModifiedAt = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float bos = 4;
 * @return {number}
 */
proto.ots.Bettor.prototype.getBos = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ots.Bettor} returns this
 */
proto.ots.Bettor.prototype.setBos = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float over_ask_factor = 5;
 * @return {number}
 */
proto.ots.Bettor.prototype.getOverAskFactor = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ots.Bettor} returns this
 */
proto.ots.Bettor.prototype.setOverAskFactor = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * repeated string oddins_labels = 6;
 * @return {!Array<string>}
 */
proto.ots.Bettor.prototype.getOddinsLabelsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ots.Bettor} returns this
 */
proto.ots.Bettor.prototype.setOddinsLabelsList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ots.Bettor} returns this
 */
proto.ots.Bettor.prototype.addOddinsLabels = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ots.Bettor} returns this
 */
proto.ots.Bettor.prototype.clearOddinsLabelsList = function() {
  return this.setOddinsLabelsList([]);
};


/**
 * repeated string clients_labels = 7;
 * @return {!Array<string>}
 */
proto.ots.Bettor.prototype.getClientsLabelsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ots.Bettor} returns this
 */
proto.ots.Bettor.prototype.setClientsLabelsList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ots.Bettor} returns this
 */
proto.ots.Bettor.prototype.addClientsLabels = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ots.Bettor} returns this
 */
proto.ots.Bettor.prototype.clearClientsLabelsList = function() {
  return this.setClientsLabelsList([]);
};


goog.object.extend(exports, proto.ots);
