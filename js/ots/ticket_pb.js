// source: ots/ticket.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js');
goog.object.extend(proto, google_protobuf_wrappers_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var ots_enum_enums_pb = require('../ots/enum/enums_pb.js');
goog.object.extend(proto, ots_enum_enums_pb);
var ots_commons_pb = require('../ots/commons_pb.js');
goog.object.extend(proto, ots_commons_pb);
goog.exportSymbol('proto.ots.AutoAcceptedOdds', null, global);
goog.exportSymbol('proto.ots.Bet', null, global);
goog.exportSymbol('proto.ots.BetBonus', null, global);
goog.exportSymbol('proto.ots.BetSelection', null, global);
goog.exportSymbol('proto.ots.BetStake', null, global);
goog.exportSymbol('proto.ots.ResponseReoffer', null, global);
goog.exportSymbol('proto.ots.Ticket', null, global);
goog.exportSymbol('proto.ots.TicketBetRejectReason', null, global);
goog.exportSymbol('proto.ots.TicketBetRejectReason.Code', null, global);
goog.exportSymbol('proto.ots.TicketCustomer', null, global);
goog.exportSymbol('proto.ots.TicketRejectReason', null, global);
goog.exportSymbol('proto.ots.TicketRejectReason.Code', null, global);
goog.exportSymbol('proto.ots.TicketRequest', null, global);
goog.exportSymbol('proto.ots.TicketRequest.DataCase', null, global);
goog.exportSymbol('proto.ots.TicketResponse', null, global);
goog.exportSymbol('proto.ots.TicketResponse.DataCase', null, global);
goog.exportSymbol('proto.ots.TicketResponseBetInfo', null, global);
goog.exportSymbol('proto.ots.TicketSelection', null, global);
goog.exportSymbol('proto.ots.TicketSelectionRejectReason', null, global);
goog.exportSymbol('proto.ots.TicketSelectionRejectReason.Code', null, global);
goog.exportSymbol('proto.ots.TicketState', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ots.TicketRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ots.TicketRequest.oneofGroups_);
};
goog.inherits(proto.ots.TicketRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ots.TicketRequest.displayName = 'proto.ots.TicketRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ots.TicketResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ots.TicketResponse.oneofGroups_);
};
goog.inherits(proto.ots.TicketResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ots.TicketResponse.displayName = 'proto.ots.TicketResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ots.Ticket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ots.Ticket.repeatedFields_, null);
};
goog.inherits(proto.ots.Ticket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ots.Ticket.displayName = 'proto.ots.Ticket';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ots.TicketSelection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ots.TicketSelection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ots.TicketSelection.displayName = 'proto.ots.TicketSelection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ots.TicketCustomer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ots.TicketCustomer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ots.TicketCustomer.displayName = 'proto.ots.TicketCustomer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ots.Bet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ots.Bet.repeatedFields_, null);
};
goog.inherits(proto.ots.Bet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ots.Bet.displayName = 'proto.ots.Bet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ots.BetSelection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ots.BetSelection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ots.BetSelection.displayName = 'proto.ots.BetSelection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ots.BetStake = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ots.BetStake, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ots.BetStake.displayName = 'proto.ots.BetStake';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ots.BetBonus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ots.BetBonus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ots.BetBonus.displayName = 'proto.ots.BetBonus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ots.TicketState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ots.TicketState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ots.TicketState.displayName = 'proto.ots.TicketState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ots.AutoAcceptedOdds = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ots.AutoAcceptedOdds, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ots.AutoAcceptedOdds.displayName = 'proto.ots.AutoAcceptedOdds';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ots.TicketRejectReason = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ots.TicketRejectReason, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ots.TicketRejectReason.displayName = 'proto.ots.TicketRejectReason';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ots.TicketBetRejectReason = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ots.TicketBetRejectReason, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ots.TicketBetRejectReason.displayName = 'proto.ots.TicketBetRejectReason';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ots.TicketResponseBetInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ots.TicketResponseBetInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ots.TicketResponseBetInfo.displayName = 'proto.ots.TicketResponseBetInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ots.TicketSelectionRejectReason = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ots.TicketSelectionRejectReason, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ots.TicketSelectionRejectReason.displayName = 'proto.ots.TicketSelectionRejectReason';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ots.ResponseReoffer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ots.ResponseReoffer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ots.ResponseReoffer.displayName = 'proto.ots.ResponseReoffer';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ots.TicketRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.ots.TicketRequest.DataCase = {
  DATA_NOT_SET: 0,
  TICKET: 1,
  KEEPALIVE: 2
};

/**
 * @return {proto.ots.TicketRequest.DataCase}
 */
proto.ots.TicketRequest.prototype.getDataCase = function() {
  return /** @type {proto.ots.TicketRequest.DataCase} */(jspb.Message.computeOneofCase(this, proto.ots.TicketRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ots.TicketRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ots.TicketRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ots.TicketRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.TicketRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticket: (f = msg.getTicket()) && proto.ots.Ticket.toObject(includeInstance, f),
    keepalive: (f = msg.getKeepalive()) && ots_commons_pb.StreamKeepalive.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ots.TicketRequest}
 */
proto.ots.TicketRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ots.TicketRequest;
  return proto.ots.TicketRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ots.TicketRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ots.TicketRequest}
 */
proto.ots.TicketRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ots.Ticket;
      reader.readMessage(value,proto.ots.Ticket.deserializeBinaryFromReader);
      msg.setTicket(value);
      break;
    case 2:
      var value = new ots_commons_pb.StreamKeepalive;
      reader.readMessage(value,ots_commons_pb.StreamKeepalive.deserializeBinaryFromReader);
      msg.setKeepalive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ots.TicketRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ots.TicketRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ots.TicketRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.TicketRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTicket();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ots.Ticket.serializeBinaryToWriter
    );
  }
  f = message.getKeepalive();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      ots_commons_pb.StreamKeepalive.serializeBinaryToWriter
    );
  }
};


/**
 * optional Ticket ticket = 1;
 * @return {?proto.ots.Ticket}
 */
proto.ots.TicketRequest.prototype.getTicket = function() {
  return /** @type{?proto.ots.Ticket} */ (
    jspb.Message.getWrapperField(this, proto.ots.Ticket, 1));
};


/**
 * @param {?proto.ots.Ticket|undefined} value
 * @return {!proto.ots.TicketRequest} returns this
*/
proto.ots.TicketRequest.prototype.setTicket = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.ots.TicketRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ots.TicketRequest} returns this
 */
proto.ots.TicketRequest.prototype.clearTicket = function() {
  return this.setTicket(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ots.TicketRequest.prototype.hasTicket = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional StreamKeepalive keepalive = 2;
 * @return {?proto.ots.StreamKeepalive}
 */
proto.ots.TicketRequest.prototype.getKeepalive = function() {
  return /** @type{?proto.ots.StreamKeepalive} */ (
    jspb.Message.getWrapperField(this, ots_commons_pb.StreamKeepalive, 2));
};


/**
 * @param {?proto.ots.StreamKeepalive|undefined} value
 * @return {!proto.ots.TicketRequest} returns this
*/
proto.ots.TicketRequest.prototype.setKeepalive = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.ots.TicketRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ots.TicketRequest} returns this
 */
proto.ots.TicketRequest.prototype.clearKeepalive = function() {
  return this.setKeepalive(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ots.TicketRequest.prototype.hasKeepalive = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ots.TicketResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.ots.TicketResponse.DataCase = {
  DATA_NOT_SET: 0,
  STATE: 1,
  KEEPALIVE: 2
};

/**
 * @return {proto.ots.TicketResponse.DataCase}
 */
proto.ots.TicketResponse.prototype.getDataCase = function() {
  return /** @type {proto.ots.TicketResponse.DataCase} */(jspb.Message.computeOneofCase(this, proto.ots.TicketResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ots.TicketResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ots.TicketResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ots.TicketResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.TicketResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: (f = msg.getState()) && proto.ots.TicketState.toObject(includeInstance, f),
    keepalive: (f = msg.getKeepalive()) && ots_commons_pb.StreamKeepalive.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ots.TicketResponse}
 */
proto.ots.TicketResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ots.TicketResponse;
  return proto.ots.TicketResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ots.TicketResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ots.TicketResponse}
 */
proto.ots.TicketResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ots.TicketState;
      reader.readMessage(value,proto.ots.TicketState.deserializeBinaryFromReader);
      msg.setState(value);
      break;
    case 2:
      var value = new ots_commons_pb.StreamKeepalive;
      reader.readMessage(value,ots_commons_pb.StreamKeepalive.deserializeBinaryFromReader);
      msg.setKeepalive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ots.TicketResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ots.TicketResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ots.TicketResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.TicketResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ots.TicketState.serializeBinaryToWriter
    );
  }
  f = message.getKeepalive();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      ots_commons_pb.StreamKeepalive.serializeBinaryToWriter
    );
  }
};


/**
 * optional TicketState state = 1;
 * @return {?proto.ots.TicketState}
 */
proto.ots.TicketResponse.prototype.getState = function() {
  return /** @type{?proto.ots.TicketState} */ (
    jspb.Message.getWrapperField(this, proto.ots.TicketState, 1));
};


/**
 * @param {?proto.ots.TicketState|undefined} value
 * @return {!proto.ots.TicketResponse} returns this
*/
proto.ots.TicketResponse.prototype.setState = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.ots.TicketResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ots.TicketResponse} returns this
 */
proto.ots.TicketResponse.prototype.clearState = function() {
  return this.setState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ots.TicketResponse.prototype.hasState = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional StreamKeepalive keepalive = 2;
 * @return {?proto.ots.StreamKeepalive}
 */
proto.ots.TicketResponse.prototype.getKeepalive = function() {
  return /** @type{?proto.ots.StreamKeepalive} */ (
    jspb.Message.getWrapperField(this, ots_commons_pb.StreamKeepalive, 2));
};


/**
 * @param {?proto.ots.StreamKeepalive|undefined} value
 * @return {!proto.ots.TicketResponse} returns this
*/
proto.ots.TicketResponse.prototype.setKeepalive = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.ots.TicketResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ots.TicketResponse} returns this
 */
proto.ots.TicketResponse.prototype.clearKeepalive = function() {
  return this.setKeepalive(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ots.TicketResponse.prototype.hasKeepalive = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ots.Ticket.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ots.Ticket.prototype.toObject = function(opt_includeInstance) {
  return proto.ots.Ticket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ots.Ticket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.Ticket.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    betsList: jspb.Message.toObjectList(msg.getBetsList(),
    proto.ots.Bet.toObject, includeInstance),
    acceptOddsChange: jspb.Message.getFieldWithDefault(msg, 4, 0),
    totalCombinations: jspb.Message.getFieldWithDefault(msg, 5, 0),
    customer: (f = msg.getCustomer()) && proto.ots.TicketCustomer.toObject(includeInstance, f),
    reofferId: (f = msg.getReofferId()) && google_protobuf_wrappers_pb.StringValue.toObject(includeInstance, f),
    selectionsMap: (f = msg.getSelectionsMap()) ? f.toObject(includeInstance, proto.ots.TicketSelection.toObject) : [],
    locationId: (f = msg.getLocationId()) && google_protobuf_wrappers_pb.StringValue.toObject(includeInstance, f),
    currency: jspb.Message.getFieldWithDefault(msg, 11, ""),
    channel: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ots.Ticket}
 */
proto.ots.Ticket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ots.Ticket;
  return proto.ots.Ticket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ots.Ticket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ots.Ticket}
 */
proto.ots.Ticket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 3:
      var value = new proto.ots.Bet;
      reader.readMessage(value,proto.ots.Bet.deserializeBinaryFromReader);
      msg.addBets(value);
      break;
    case 4:
      var value = /** @type {!proto.ots.enums.AcceptOddsChange} */ (reader.readEnum());
      msg.setAcceptOddsChange(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalCombinations(value);
      break;
    case 6:
      var value = new proto.ots.TicketCustomer;
      reader.readMessage(value,proto.ots.TicketCustomer.deserializeBinaryFromReader);
      msg.setCustomer(value);
      break;
    case 8:
      var value = new google_protobuf_wrappers_pb.StringValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.StringValue.deserializeBinaryFromReader);
      msg.setReofferId(value);
      break;
    case 9:
      var value = msg.getSelectionsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.ots.TicketSelection.deserializeBinaryFromReader, "", new proto.ots.TicketSelection());
         });
      break;
    case 10:
      var value = new google_protobuf_wrappers_pb.StringValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.StringValue.deserializeBinaryFromReader);
      msg.setLocationId(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    case 12:
      var value = /** @type {!proto.ots.enums.TicketChannel} */ (reader.readEnum());
      msg.setChannel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ots.Ticket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ots.Ticket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ots.Ticket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.Ticket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getBetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ots.Bet.serializeBinaryToWriter
    );
  }
  f = message.getAcceptOddsChange();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getTotalCombinations();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getCustomer();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.ots.TicketCustomer.serializeBinaryToWriter
    );
  }
  f = message.getReofferId();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      google_protobuf_wrappers_pb.StringValue.serializeBinaryToWriter
    );
  }
  f = message.getSelectionsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(9, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.ots.TicketSelection.serializeBinaryToWriter);
  }
  f = message.getLocationId();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      google_protobuf_wrappers_pb.StringValue.serializeBinaryToWriter
    );
  }
  f = message.getCurrency();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getChannel();
  if (f !== 0.0) {
    writer.writeEnum(
      12,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ots.Ticket.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ots.Ticket} returns this
 */
proto.ots.Ticket.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp timestamp = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.ots.Ticket.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.ots.Ticket} returns this
*/
proto.ots.Ticket.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ots.Ticket} returns this
 */
proto.ots.Ticket.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ots.Ticket.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Bet bets = 3;
 * @return {!Array<!proto.ots.Bet>}
 */
proto.ots.Ticket.prototype.getBetsList = function() {
  return /** @type{!Array<!proto.ots.Bet>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ots.Bet, 3));
};


/**
 * @param {!Array<!proto.ots.Bet>} value
 * @return {!proto.ots.Ticket} returns this
*/
proto.ots.Ticket.prototype.setBetsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ots.Bet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ots.Bet}
 */
proto.ots.Ticket.prototype.addBets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ots.Bet, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ots.Ticket} returns this
 */
proto.ots.Ticket.prototype.clearBetsList = function() {
  return this.setBetsList([]);
};


/**
 * optional enums.AcceptOddsChange accept_odds_change = 4;
 * @return {!proto.ots.enums.AcceptOddsChange}
 */
proto.ots.Ticket.prototype.getAcceptOddsChange = function() {
  return /** @type {!proto.ots.enums.AcceptOddsChange} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.ots.enums.AcceptOddsChange} value
 * @return {!proto.ots.Ticket} returns this
 */
proto.ots.Ticket.prototype.setAcceptOddsChange = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional uint64 total_combinations = 5;
 * @return {number}
 */
proto.ots.Ticket.prototype.getTotalCombinations = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ots.Ticket} returns this
 */
proto.ots.Ticket.prototype.setTotalCombinations = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional TicketCustomer customer = 6;
 * @return {?proto.ots.TicketCustomer}
 */
proto.ots.Ticket.prototype.getCustomer = function() {
  return /** @type{?proto.ots.TicketCustomer} */ (
    jspb.Message.getWrapperField(this, proto.ots.TicketCustomer, 6));
};


/**
 * @param {?proto.ots.TicketCustomer|undefined} value
 * @return {!proto.ots.Ticket} returns this
*/
proto.ots.Ticket.prototype.setCustomer = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ots.Ticket} returns this
 */
proto.ots.Ticket.prototype.clearCustomer = function() {
  return this.setCustomer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ots.Ticket.prototype.hasCustomer = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional google.protobuf.StringValue reoffer_id = 8;
 * @return {?proto.google.protobuf.StringValue}
 */
proto.ots.Ticket.prototype.getReofferId = function() {
  return /** @type{?proto.google.protobuf.StringValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.StringValue, 8));
};


/**
 * @param {?proto.google.protobuf.StringValue|undefined} value
 * @return {!proto.ots.Ticket} returns this
*/
proto.ots.Ticket.prototype.setReofferId = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ots.Ticket} returns this
 */
proto.ots.Ticket.prototype.clearReofferId = function() {
  return this.setReofferId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ots.Ticket.prototype.hasReofferId = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * map<string, TicketSelection> selections = 9;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.ots.TicketSelection>}
 */
proto.ots.Ticket.prototype.getSelectionsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.ots.TicketSelection>} */ (
      jspb.Message.getMapField(this, 9, opt_noLazyCreate,
      proto.ots.TicketSelection));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ots.Ticket} returns this
 */
proto.ots.Ticket.prototype.clearSelectionsMap = function() {
  this.getSelectionsMap().clear();
  return this;};


/**
 * optional google.protobuf.StringValue location_id = 10;
 * @return {?proto.google.protobuf.StringValue}
 */
proto.ots.Ticket.prototype.getLocationId = function() {
  return /** @type{?proto.google.protobuf.StringValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.StringValue, 10));
};


/**
 * @param {?proto.google.protobuf.StringValue|undefined} value
 * @return {!proto.ots.Ticket} returns this
*/
proto.ots.Ticket.prototype.setLocationId = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ots.Ticket} returns this
 */
proto.ots.Ticket.prototype.clearLocationId = function() {
  return this.setLocationId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ots.Ticket.prototype.hasLocationId = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string currency = 11;
 * @return {string}
 */
proto.ots.Ticket.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.ots.Ticket} returns this
 */
proto.ots.Ticket.prototype.setCurrency = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional enums.TicketChannel channel = 12;
 * @return {!proto.ots.enums.TicketChannel}
 */
proto.ots.Ticket.prototype.getChannel = function() {
  return /** @type {!proto.ots.enums.TicketChannel} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {!proto.ots.enums.TicketChannel} value
 * @return {!proto.ots.Ticket} returns this
 */
proto.ots.Ticket.prototype.setChannel = function(value) {
  return jspb.Message.setProto3EnumField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ots.TicketSelection.prototype.toObject = function(opt_includeInstance) {
  return proto.ots.TicketSelection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ots.TicketSelection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.TicketSelection.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    odds: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ots.TicketSelection}
 */
proto.ots.TicketSelection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ots.TicketSelection;
  return proto.ots.TicketSelection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ots.TicketSelection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ots.TicketSelection}
 */
proto.ots.TicketSelection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOdds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ots.TicketSelection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ots.TicketSelection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ots.TicketSelection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.TicketSelection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOdds();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ots.TicketSelection.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ots.TicketSelection} returns this
 */
proto.ots.TicketSelection.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 odds = 3;
 * @return {number}
 */
proto.ots.TicketSelection.prototype.getOdds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ots.TicketSelection} returns this
 */
proto.ots.TicketSelection.prototype.setOdds = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ots.TicketCustomer.prototype.toObject = function(opt_includeInstance) {
  return proto.ots.TicketCustomer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ots.TicketCustomer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.TicketCustomer.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ip: (f = msg.getIp()) && google_protobuf_wrappers_pb.StringValue.toObject(includeInstance, f),
    deviceId: (f = msg.getDeviceId()) && google_protobuf_wrappers_pb.StringValue.toObject(includeInstance, f),
    language: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ots.TicketCustomer}
 */
proto.ots.TicketCustomer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ots.TicketCustomer;
  return proto.ots.TicketCustomer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ots.TicketCustomer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ots.TicketCustomer}
 */
proto.ots.TicketCustomer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new google_protobuf_wrappers_pb.StringValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.StringValue.deserializeBinaryFromReader);
      msg.setIp(value);
      break;
    case 3:
      var value = new google_protobuf_wrappers_pb.StringValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.StringValue.deserializeBinaryFromReader);
      msg.setDeviceId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ots.TicketCustomer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ots.TicketCustomer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ots.TicketCustomer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.TicketCustomer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_wrappers_pb.StringValue.serializeBinaryToWriter
    );
  }
  f = message.getDeviceId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_wrappers_pb.StringValue.serializeBinaryToWriter
    );
  }
  f = message.getLanguage();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ots.TicketCustomer.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ots.TicketCustomer} returns this
 */
proto.ots.TicketCustomer.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.StringValue ip = 2;
 * @return {?proto.google.protobuf.StringValue}
 */
proto.ots.TicketCustomer.prototype.getIp = function() {
  return /** @type{?proto.google.protobuf.StringValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.StringValue, 2));
};


/**
 * @param {?proto.google.protobuf.StringValue|undefined} value
 * @return {!proto.ots.TicketCustomer} returns this
*/
proto.ots.TicketCustomer.prototype.setIp = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ots.TicketCustomer} returns this
 */
proto.ots.TicketCustomer.prototype.clearIp = function() {
  return this.setIp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ots.TicketCustomer.prototype.hasIp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.StringValue device_id = 3;
 * @return {?proto.google.protobuf.StringValue}
 */
proto.ots.TicketCustomer.prototype.getDeviceId = function() {
  return /** @type{?proto.google.protobuf.StringValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.StringValue, 3));
};


/**
 * @param {?proto.google.protobuf.StringValue|undefined} value
 * @return {!proto.ots.TicketCustomer} returns this
*/
proto.ots.TicketCustomer.prototype.setDeviceId = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ots.TicketCustomer} returns this
 */
proto.ots.TicketCustomer.prototype.clearDeviceId = function() {
  return this.setDeviceId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ots.TicketCustomer.prototype.hasDeviceId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string language = 4;
 * @return {string}
 */
proto.ots.TicketCustomer.prototype.getLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ots.TicketCustomer} returns this
 */
proto.ots.TicketCustomer.prototype.setLanguage = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ots.Bet.repeatedFields_ = [6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ots.Bet.prototype.toObject = function(opt_includeInstance) {
  return proto.ots.Bet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ots.Bet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.Bet.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && google_protobuf_wrappers_pb.StringValue.toObject(includeInstance, f),
    bonus: (f = msg.getBonus()) && proto.ots.BetBonus.toObject(includeInstance, f),
    stake: (f = msg.getStake()) && proto.ots.BetStake.toObject(includeInstance, f),
    reofferId: (f = msg.getReofferId()) && google_protobuf_wrappers_pb.StringValue.toObject(includeInstance, f),
    totalWins: (f = msg.getTotalWins()) && google_protobuf_wrappers_pb.UInt64Value.toObject(includeInstance, f),
    systemsList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    selectionsList: jspb.Message.toObjectList(msg.getSelectionsList(),
    proto.ots.BetSelection.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ots.Bet}
 */
proto.ots.Bet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ots.Bet;
  return proto.ots.Bet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ots.Bet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ots.Bet}
 */
proto.ots.Bet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_wrappers_pb.StringValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.StringValue.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new proto.ots.BetBonus;
      reader.readMessage(value,proto.ots.BetBonus.deserializeBinaryFromReader);
      msg.setBonus(value);
      break;
    case 3:
      var value = new proto.ots.BetStake;
      reader.readMessage(value,proto.ots.BetStake.deserializeBinaryFromReader);
      msg.setStake(value);
      break;
    case 4:
      var value = new google_protobuf_wrappers_pb.StringValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.StringValue.deserializeBinaryFromReader);
      msg.setReofferId(value);
      break;
    case 5:
      var value = new google_protobuf_wrappers_pb.UInt64Value;
      reader.readMessage(value,google_protobuf_wrappers_pb.UInt64Value.deserializeBinaryFromReader);
      msg.setTotalWins(value);
      break;
    case 6:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addSystems(values[i]);
      }
      break;
    case 7:
      var value = new proto.ots.BetSelection;
      reader.readMessage(value,proto.ots.BetSelection.deserializeBinaryFromReader);
      msg.addSelections(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ots.Bet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ots.Bet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ots.Bet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.Bet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_wrappers_pb.StringValue.serializeBinaryToWriter
    );
  }
  f = message.getBonus();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ots.BetBonus.serializeBinaryToWriter
    );
  }
  f = message.getStake();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ots.BetStake.serializeBinaryToWriter
    );
  }
  f = message.getReofferId();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_wrappers_pb.StringValue.serializeBinaryToWriter
    );
  }
  f = message.getTotalWins();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_wrappers_pb.UInt64Value.serializeBinaryToWriter
    );
  }
  f = message.getSystemsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      6,
      f
    );
  }
  f = message.getSelectionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.ots.BetSelection.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.StringValue id = 1;
 * @return {?proto.google.protobuf.StringValue}
 */
proto.ots.Bet.prototype.getId = function() {
  return /** @type{?proto.google.protobuf.StringValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.StringValue, 1));
};


/**
 * @param {?proto.google.protobuf.StringValue|undefined} value
 * @return {!proto.ots.Bet} returns this
*/
proto.ots.Bet.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ots.Bet} returns this
 */
proto.ots.Bet.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ots.Bet.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BetBonus bonus = 2;
 * @return {?proto.ots.BetBonus}
 */
proto.ots.Bet.prototype.getBonus = function() {
  return /** @type{?proto.ots.BetBonus} */ (
    jspb.Message.getWrapperField(this, proto.ots.BetBonus, 2));
};


/**
 * @param {?proto.ots.BetBonus|undefined} value
 * @return {!proto.ots.Bet} returns this
*/
proto.ots.Bet.prototype.setBonus = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ots.Bet} returns this
 */
proto.ots.Bet.prototype.clearBonus = function() {
  return this.setBonus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ots.Bet.prototype.hasBonus = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional BetStake stake = 3;
 * @return {?proto.ots.BetStake}
 */
proto.ots.Bet.prototype.getStake = function() {
  return /** @type{?proto.ots.BetStake} */ (
    jspb.Message.getWrapperField(this, proto.ots.BetStake, 3));
};


/**
 * @param {?proto.ots.BetStake|undefined} value
 * @return {!proto.ots.Bet} returns this
*/
proto.ots.Bet.prototype.setStake = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ots.Bet} returns this
 */
proto.ots.Bet.prototype.clearStake = function() {
  return this.setStake(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ots.Bet.prototype.hasStake = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.StringValue reoffer_id = 4;
 * @return {?proto.google.protobuf.StringValue}
 */
proto.ots.Bet.prototype.getReofferId = function() {
  return /** @type{?proto.google.protobuf.StringValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.StringValue, 4));
};


/**
 * @param {?proto.google.protobuf.StringValue|undefined} value
 * @return {!proto.ots.Bet} returns this
*/
proto.ots.Bet.prototype.setReofferId = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ots.Bet} returns this
 */
proto.ots.Bet.prototype.clearReofferId = function() {
  return this.setReofferId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ots.Bet.prototype.hasReofferId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional google.protobuf.UInt64Value total_wins = 5;
 * @return {?proto.google.protobuf.UInt64Value}
 */
proto.ots.Bet.prototype.getTotalWins = function() {
  return /** @type{?proto.google.protobuf.UInt64Value} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.UInt64Value, 5));
};


/**
 * @param {?proto.google.protobuf.UInt64Value|undefined} value
 * @return {!proto.ots.Bet} returns this
*/
proto.ots.Bet.prototype.setTotalWins = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ots.Bet} returns this
 */
proto.ots.Bet.prototype.clearTotalWins = function() {
  return this.setTotalWins(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ots.Bet.prototype.hasTotalWins = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated uint32 systems = 6;
 * @return {!Array<number>}
 */
proto.ots.Bet.prototype.getSystemsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ots.Bet} returns this
 */
proto.ots.Bet.prototype.setSystemsList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ots.Bet} returns this
 */
proto.ots.Bet.prototype.addSystems = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ots.Bet} returns this
 */
proto.ots.Bet.prototype.clearSystemsList = function() {
  return this.setSystemsList([]);
};


/**
 * repeated BetSelection selections = 7;
 * @return {!Array<!proto.ots.BetSelection>}
 */
proto.ots.Bet.prototype.getSelectionsList = function() {
  return /** @type{!Array<!proto.ots.BetSelection>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ots.BetSelection, 7));
};


/**
 * @param {!Array<!proto.ots.BetSelection>} value
 * @return {!proto.ots.Bet} returns this
*/
proto.ots.Bet.prototype.setSelectionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.ots.BetSelection=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ots.BetSelection}
 */
proto.ots.Bet.prototype.addSelections = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.ots.BetSelection, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ots.Bet} returns this
 */
proto.ots.Bet.prototype.clearSelectionsList = function() {
  return this.setSelectionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ots.BetSelection.prototype.toObject = function(opt_includeInstance) {
  return proto.ots.BetSelection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ots.BetSelection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.BetSelection.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ots.BetSelection}
 */
proto.ots.BetSelection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ots.BetSelection;
  return proto.ots.BetSelection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ots.BetSelection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ots.BetSelection}
 */
proto.ots.BetSelection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ots.BetSelection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ots.BetSelection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ots.BetSelection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.BetSelection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ots.BetSelection.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ots.BetSelection} returns this
 */
proto.ots.BetSelection.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ots.BetStake.prototype.toObject = function(opt_includeInstance) {
  return proto.ots.BetStake.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ots.BetStake} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.BetStake.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ots.BetStake}
 */
proto.ots.BetStake.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ots.BetStake;
  return proto.ots.BetStake.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ots.BetStake} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ots.BetStake}
 */
proto.ots.BetStake.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {!proto.ots.enums.BetStakeType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ots.BetStake.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ots.BetStake.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ots.BetStake} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.BetStake.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional uint64 value = 1;
 * @return {number}
 */
proto.ots.BetStake.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ots.BetStake} returns this
 */
proto.ots.BetStake.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional enums.BetStakeType type = 2;
 * @return {!proto.ots.enums.BetStakeType}
 */
proto.ots.BetStake.prototype.getType = function() {
  return /** @type {!proto.ots.enums.BetStakeType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.ots.enums.BetStakeType} value
 * @return {!proto.ots.BetStake} returns this
 */
proto.ots.BetStake.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ots.BetBonus.prototype.toObject = function(opt_includeInstance) {
  return proto.ots.BetBonus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ots.BetBonus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.BetBonus.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    mode: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ots.BetBonus}
 */
proto.ots.BetBonus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ots.BetBonus;
  return proto.ots.BetBonus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ots.BetBonus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ots.BetBonus}
 */
proto.ots.BetBonus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {!proto.ots.enums.BetBonusType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {!proto.ots.enums.BetBonusMode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ots.BetBonus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ots.BetBonus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ots.BetBonus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.BetBonus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional uint64 value = 1;
 * @return {number}
 */
proto.ots.BetBonus.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ots.BetBonus} returns this
 */
proto.ots.BetBonus.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional enums.BetBonusType type = 2;
 * @return {!proto.ots.enums.BetBonusType}
 */
proto.ots.BetBonus.prototype.getType = function() {
  return /** @type {!proto.ots.enums.BetBonusType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.ots.enums.BetBonusType} value
 * @return {!proto.ots.BetBonus} returns this
 */
proto.ots.BetBonus.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional enums.BetBonusMode mode = 3;
 * @return {!proto.ots.enums.BetBonusMode}
 */
proto.ots.BetBonus.prototype.getMode = function() {
  return /** @type {!proto.ots.enums.BetBonusMode} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.ots.enums.BetBonusMode} value
 * @return {!proto.ots.BetBonus} returns this
 */
proto.ots.BetBonus.prototype.setMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ots.TicketState.prototype.toObject = function(opt_includeInstance) {
  return proto.ots.TicketState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ots.TicketState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.TicketState.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ticketStatus: jspb.Message.getFieldWithDefault(msg, 2, 0),
    rejectReason: (f = msg.getRejectReason()) && proto.ots.TicketRejectReason.toObject(includeInstance, f),
    betInfoMap: (f = msg.getBetInfoMap()) ? f.toObject(includeInstance, proto.ots.TicketResponseBetInfo.toObject) : [],
    selectionInfoMap: (f = msg.getSelectionInfoMap()) ? f.toObject(includeInstance, proto.ots.TicketSelectionRejectReason.toObject) : [],
    exchangeRate: (f = msg.getExchangeRate()) && google_protobuf_wrappers_pb.UInt64Value.toObject(includeInstance, f),
    autoAcceptedOddsMap: (f = msg.getAutoAcceptedOddsMap()) ? f.toObject(includeInstance, proto.ots.AutoAcceptedOdds.toObject) : [],
    reoffer: (f = msg.getReoffer()) && proto.ots.ResponseReoffer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ots.TicketState}
 */
proto.ots.TicketState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ots.TicketState;
  return proto.ots.TicketState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ots.TicketState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ots.TicketState}
 */
proto.ots.TicketState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.ots.enums.AcceptanceStatus} */ (reader.readEnum());
      msg.setTicketStatus(value);
      break;
    case 3:
      var value = new proto.ots.TicketRejectReason;
      reader.readMessage(value,proto.ots.TicketRejectReason.deserializeBinaryFromReader);
      msg.setRejectReason(value);
      break;
    case 4:
      var value = msg.getBetInfoMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.ots.TicketResponseBetInfo.deserializeBinaryFromReader, "", new proto.ots.TicketResponseBetInfo());
         });
      break;
    case 7:
      var value = msg.getSelectionInfoMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.ots.TicketSelectionRejectReason.deserializeBinaryFromReader, "", new proto.ots.TicketSelectionRejectReason());
         });
      break;
    case 5:
      var value = new google_protobuf_wrappers_pb.UInt64Value;
      reader.readMessage(value,google_protobuf_wrappers_pb.UInt64Value.deserializeBinaryFromReader);
      msg.setExchangeRate(value);
      break;
    case 6:
      var value = msg.getAutoAcceptedOddsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.ots.AutoAcceptedOdds.deserializeBinaryFromReader, "", new proto.ots.AutoAcceptedOdds());
         });
      break;
    case 8:
      var value = new proto.ots.ResponseReoffer;
      reader.readMessage(value,proto.ots.ResponseReoffer.deserializeBinaryFromReader);
      msg.setReoffer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ots.TicketState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ots.TicketState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ots.TicketState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.TicketState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTicketStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getRejectReason();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ots.TicketRejectReason.serializeBinaryToWriter
    );
  }
  f = message.getBetInfoMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.ots.TicketResponseBetInfo.serializeBinaryToWriter);
  }
  f = message.getSelectionInfoMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.ots.TicketSelectionRejectReason.serializeBinaryToWriter);
  }
  f = message.getExchangeRate();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_wrappers_pb.UInt64Value.serializeBinaryToWriter
    );
  }
  f = message.getAutoAcceptedOddsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.ots.AutoAcceptedOdds.serializeBinaryToWriter);
  }
  f = message.getReoffer();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.ots.ResponseReoffer.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ots.TicketState.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ots.TicketState} returns this
 */
proto.ots.TicketState.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional enums.AcceptanceStatus ticket_status = 2;
 * @return {!proto.ots.enums.AcceptanceStatus}
 */
proto.ots.TicketState.prototype.getTicketStatus = function() {
  return /** @type {!proto.ots.enums.AcceptanceStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.ots.enums.AcceptanceStatus} value
 * @return {!proto.ots.TicketState} returns this
 */
proto.ots.TicketState.prototype.setTicketStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional TicketRejectReason reject_reason = 3;
 * @return {?proto.ots.TicketRejectReason}
 */
proto.ots.TicketState.prototype.getRejectReason = function() {
  return /** @type{?proto.ots.TicketRejectReason} */ (
    jspb.Message.getWrapperField(this, proto.ots.TicketRejectReason, 3));
};


/**
 * @param {?proto.ots.TicketRejectReason|undefined} value
 * @return {!proto.ots.TicketState} returns this
*/
proto.ots.TicketState.prototype.setRejectReason = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ots.TicketState} returns this
 */
proto.ots.TicketState.prototype.clearRejectReason = function() {
  return this.setRejectReason(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ots.TicketState.prototype.hasRejectReason = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * map<string, TicketResponseBetInfo> bet_info = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.ots.TicketResponseBetInfo>}
 */
proto.ots.TicketState.prototype.getBetInfoMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.ots.TicketResponseBetInfo>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.ots.TicketResponseBetInfo));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ots.TicketState} returns this
 */
proto.ots.TicketState.prototype.clearBetInfoMap = function() {
  this.getBetInfoMap().clear();
  return this;};


/**
 * map<string, TicketSelectionRejectReason> selection_info = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.ots.TicketSelectionRejectReason>}
 */
proto.ots.TicketState.prototype.getSelectionInfoMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.ots.TicketSelectionRejectReason>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      proto.ots.TicketSelectionRejectReason));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ots.TicketState} returns this
 */
proto.ots.TicketState.prototype.clearSelectionInfoMap = function() {
  this.getSelectionInfoMap().clear();
  return this;};


/**
 * optional google.protobuf.UInt64Value exchange_rate = 5;
 * @return {?proto.google.protobuf.UInt64Value}
 */
proto.ots.TicketState.prototype.getExchangeRate = function() {
  return /** @type{?proto.google.protobuf.UInt64Value} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.UInt64Value, 5));
};


/**
 * @param {?proto.google.protobuf.UInt64Value|undefined} value
 * @return {!proto.ots.TicketState} returns this
*/
proto.ots.TicketState.prototype.setExchangeRate = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ots.TicketState} returns this
 */
proto.ots.TicketState.prototype.clearExchangeRate = function() {
  return this.setExchangeRate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ots.TicketState.prototype.hasExchangeRate = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * map<string, AutoAcceptedOdds> auto_accepted_odds = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.ots.AutoAcceptedOdds>}
 */
proto.ots.TicketState.prototype.getAutoAcceptedOddsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.ots.AutoAcceptedOdds>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      proto.ots.AutoAcceptedOdds));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ots.TicketState} returns this
 */
proto.ots.TicketState.prototype.clearAutoAcceptedOddsMap = function() {
  this.getAutoAcceptedOddsMap().clear();
  return this;};


/**
 * optional ResponseReoffer reoffer = 8;
 * @return {?proto.ots.ResponseReoffer}
 */
proto.ots.TicketState.prototype.getReoffer = function() {
  return /** @type{?proto.ots.ResponseReoffer} */ (
    jspb.Message.getWrapperField(this, proto.ots.ResponseReoffer, 8));
};


/**
 * @param {?proto.ots.ResponseReoffer|undefined} value
 * @return {!proto.ots.TicketState} returns this
*/
proto.ots.TicketState.prototype.setReoffer = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ots.TicketState} returns this
 */
proto.ots.TicketState.prototype.clearReoffer = function() {
  return this.setReoffer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ots.TicketState.prototype.hasReoffer = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ots.AutoAcceptedOdds.prototype.toObject = function(opt_includeInstance) {
  return proto.ots.AutoAcceptedOdds.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ots.AutoAcceptedOdds} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.AutoAcceptedOdds.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    requestedOdds: jspb.Message.getFieldWithDefault(msg, 2, 0),
    usedOdds: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ots.AutoAcceptedOdds}
 */
proto.ots.AutoAcceptedOdds.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ots.AutoAcceptedOdds;
  return proto.ots.AutoAcceptedOdds.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ots.AutoAcceptedOdds} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ots.AutoAcceptedOdds}
 */
proto.ots.AutoAcceptedOdds.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestedOdds(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUsedOdds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ots.AutoAcceptedOdds.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ots.AutoAcceptedOdds.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ots.AutoAcceptedOdds} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.AutoAcceptedOdds.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRequestedOdds();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getUsedOdds();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ots.AutoAcceptedOdds.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ots.AutoAcceptedOdds} returns this
 */
proto.ots.AutoAcceptedOdds.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 requested_odds = 2;
 * @return {number}
 */
proto.ots.AutoAcceptedOdds.prototype.getRequestedOdds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ots.AutoAcceptedOdds} returns this
 */
proto.ots.AutoAcceptedOdds.prototype.setRequestedOdds = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 used_odds = 3;
 * @return {number}
 */
proto.ots.AutoAcceptedOdds.prototype.getUsedOdds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ots.AutoAcceptedOdds} returns this
 */
proto.ots.AutoAcceptedOdds.prototype.setUsedOdds = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ots.TicketRejectReason.prototype.toObject = function(opt_includeInstance) {
  return proto.ots.TicketRejectReason.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ots.TicketRejectReason} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.TicketRejectReason.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ots.TicketRejectReason}
 */
proto.ots.TicketRejectReason.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ots.TicketRejectReason;
  return proto.ots.TicketRejectReason.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ots.TicketRejectReason} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ots.TicketRejectReason}
 */
proto.ots.TicketRejectReason.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ots.TicketRejectReason.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ots.TicketRejectReason.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ots.TicketRejectReason.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ots.TicketRejectReason} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.TicketRejectReason.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.ots.TicketRejectReason.Code = {
  CODE_UNSPECIFIED: 0,
  CODE_INTERNAL: 1,
  CODE_INVALID_ARGUMENT: 2,
  CODE_ALREADY_EXISTS: 3,
  CODE_STAKE_TO_LOW: 4,
  CODE_STAKE_TO_HIGH: 5,
  CODE_MAX_PAYOUT_BREACHED: 6,
  CODE_BETS_NOT_ACCEPTABLE: 7,
  CODE_SELECTIONS_NOT_ACCEPTABLE: 8
};

/**
 * optional Code code = 1;
 * @return {!proto.ots.TicketRejectReason.Code}
 */
proto.ots.TicketRejectReason.prototype.getCode = function() {
  return /** @type {!proto.ots.TicketRejectReason.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ots.TicketRejectReason.Code} value
 * @return {!proto.ots.TicketRejectReason} returns this
 */
proto.ots.TicketRejectReason.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.ots.TicketRejectReason.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ots.TicketRejectReason} returns this
 */
proto.ots.TicketRejectReason.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ots.TicketBetRejectReason.prototype.toObject = function(opt_includeInstance) {
  return proto.ots.TicketBetRejectReason.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ots.TicketBetRejectReason} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.TicketBetRejectReason.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ots.TicketBetRejectReason}
 */
proto.ots.TicketBetRejectReason.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ots.TicketBetRejectReason;
  return proto.ots.TicketBetRejectReason.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ots.TicketBetRejectReason} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ots.TicketBetRejectReason}
 */
proto.ots.TicketBetRejectReason.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ots.TicketBetRejectReason.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ots.TicketBetRejectReason.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ots.TicketBetRejectReason.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ots.TicketBetRejectReason} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.TicketBetRejectReason.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.ots.TicketBetRejectReason.Code = {
  CODE_UNSPECIFIED: 0,
  CODE_ODDS_CHANGED: 1,
  CODE_SELECTION_NOT_ACTIVE: 2,
  CODE_STAKE_TO_LOW: 3,
  CODE_STAKE_TO_HIGH: 4,
  CODE_MAX_PAYOUT_BREACHED: 5,
  CODE_MARKET_LIABILITY_BREACHED: 6,
  CODE_BETTOR_LIABILITY_BREACHED: 7,
  CODE_EVENT_LIABILITY_BREACHED: 8
};

/**
 * optional Code code = 1;
 * @return {!proto.ots.TicketBetRejectReason.Code}
 */
proto.ots.TicketBetRejectReason.prototype.getCode = function() {
  return /** @type {!proto.ots.TicketBetRejectReason.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ots.TicketBetRejectReason.Code} value
 * @return {!proto.ots.TicketBetRejectReason} returns this
 */
proto.ots.TicketBetRejectReason.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.ots.TicketBetRejectReason.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ots.TicketBetRejectReason} returns this
 */
proto.ots.TicketBetRejectReason.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ots.TicketResponseBetInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ots.TicketResponseBetInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ots.TicketResponseBetInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.TicketResponseBetInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rejectReason: (f = msg.getRejectReason()) && proto.ots.TicketBetRejectReason.toObject(includeInstance, f),
    reoffer: (f = msg.getReoffer()) && proto.ots.ResponseReoffer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ots.TicketResponseBetInfo}
 */
proto.ots.TicketResponseBetInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ots.TicketResponseBetInfo;
  return proto.ots.TicketResponseBetInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ots.TicketResponseBetInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ots.TicketResponseBetInfo}
 */
proto.ots.TicketResponseBetInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.ots.TicketBetRejectReason;
      reader.readMessage(value,proto.ots.TicketBetRejectReason.deserializeBinaryFromReader);
      msg.setRejectReason(value);
      break;
    case 3:
      var value = new proto.ots.ResponseReoffer;
      reader.readMessage(value,proto.ots.ResponseReoffer.deserializeBinaryFromReader);
      msg.setReoffer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ots.TicketResponseBetInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ots.TicketResponseBetInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ots.TicketResponseBetInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.TicketResponseBetInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRejectReason();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ots.TicketBetRejectReason.serializeBinaryToWriter
    );
  }
  f = message.getReoffer();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ots.ResponseReoffer.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ots.TicketResponseBetInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ots.TicketResponseBetInfo} returns this
 */
proto.ots.TicketResponseBetInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional TicketBetRejectReason reject_reason = 2;
 * @return {?proto.ots.TicketBetRejectReason}
 */
proto.ots.TicketResponseBetInfo.prototype.getRejectReason = function() {
  return /** @type{?proto.ots.TicketBetRejectReason} */ (
    jspb.Message.getWrapperField(this, proto.ots.TicketBetRejectReason, 2));
};


/**
 * @param {?proto.ots.TicketBetRejectReason|undefined} value
 * @return {!proto.ots.TicketResponseBetInfo} returns this
*/
proto.ots.TicketResponseBetInfo.prototype.setRejectReason = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ots.TicketResponseBetInfo} returns this
 */
proto.ots.TicketResponseBetInfo.prototype.clearRejectReason = function() {
  return this.setRejectReason(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ots.TicketResponseBetInfo.prototype.hasRejectReason = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ResponseReoffer reoffer = 3;
 * @return {?proto.ots.ResponseReoffer}
 */
proto.ots.TicketResponseBetInfo.prototype.getReoffer = function() {
  return /** @type{?proto.ots.ResponseReoffer} */ (
    jspb.Message.getWrapperField(this, proto.ots.ResponseReoffer, 3));
};


/**
 * @param {?proto.ots.ResponseReoffer|undefined} value
 * @return {!proto.ots.TicketResponseBetInfo} returns this
*/
proto.ots.TicketResponseBetInfo.prototype.setReoffer = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ots.TicketResponseBetInfo} returns this
 */
proto.ots.TicketResponseBetInfo.prototype.clearReoffer = function() {
  return this.setReoffer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ots.TicketResponseBetInfo.prototype.hasReoffer = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ots.TicketSelectionRejectReason.prototype.toObject = function(opt_includeInstance) {
  return proto.ots.TicketSelectionRejectReason.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ots.TicketSelectionRejectReason} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.TicketSelectionRejectReason.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ots.TicketSelectionRejectReason}
 */
proto.ots.TicketSelectionRejectReason.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ots.TicketSelectionRejectReason;
  return proto.ots.TicketSelectionRejectReason.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ots.TicketSelectionRejectReason} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ots.TicketSelectionRejectReason}
 */
proto.ots.TicketSelectionRejectReason.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ots.TicketSelectionRejectReason.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ots.TicketSelectionRejectReason.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ots.TicketSelectionRejectReason.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ots.TicketSelectionRejectReason} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.TicketSelectionRejectReason.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.ots.TicketSelectionRejectReason.Code = {
  CODE_UNSPECIFIED: 0,
  CODE_ODDS_CHANGED: 1,
  CODE_NOT_ACTIVE: 2
};

/**
 * optional Code code = 1;
 * @return {!proto.ots.TicketSelectionRejectReason.Code}
 */
proto.ots.TicketSelectionRejectReason.prototype.getCode = function() {
  return /** @type {!proto.ots.TicketSelectionRejectReason.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ots.TicketSelectionRejectReason.Code} value
 * @return {!proto.ots.TicketSelectionRejectReason} returns this
 */
proto.ots.TicketSelectionRejectReason.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.ots.TicketSelectionRejectReason.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ots.TicketSelectionRejectReason} returns this
 */
proto.ots.TicketSelectionRejectReason.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ots.ResponseReoffer.prototype.toObject = function(opt_includeInstance) {
  return proto.ots.ResponseReoffer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ots.ResponseReoffer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.ResponseReoffer.toObject = function(includeInstance, msg) {
  var f, obj = {
    stake: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ots.ResponseReoffer}
 */
proto.ots.ResponseReoffer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ots.ResponseReoffer;
  return proto.ots.ResponseReoffer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ots.ResponseReoffer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ots.ResponseReoffer}
 */
proto.ots.ResponseReoffer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStake(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ots.ResponseReoffer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ots.ResponseReoffer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ots.ResponseReoffer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ots.ResponseReoffer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStake();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 stake = 1;
 * @return {number}
 */
proto.ots.ResponseReoffer.prototype.getStake = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ots.ResponseReoffer} returns this
 */
proto.ots.ResponseReoffer.prototype.setStake = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


goog.object.extend(exports, proto.ots);
